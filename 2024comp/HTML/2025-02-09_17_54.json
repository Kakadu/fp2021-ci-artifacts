{"message":"Match is redundant. It's recommended to rewrite it as 'if parens_pred e\nthen\n  format_of_string\n    (CamlinternalFormatBasics.Format\n       ((CamlinternalFormatBasics.Char_literal\n           ('(',\n             (CamlinternalFormatBasics.Alpha\n                (CamlinternalFormatBasics.Char_literal\n                   (')', CamlinternalFormatBasics.End_of_format))))), \"(%a)\"))\nelse\n  format_of_string\n    (CamlinternalFormatBasics.Format\n       ((CamlinternalFormatBasics.Alpha\n           CamlinternalFormatBasics.End_of_format), \"%a\"))'","location":{"path":"HTML/lib/ast/pp_utils.ml","range":{"start":{"line":9,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'pattern_or_op_typed' as follows:\ntype pattern_or_op_typed = (pattern_or_op * typ option)[@@ocaml.doc\n                                                         \" typed pattern or op \"]\n[@@deriving (eq, (show { with_path = false }))]","location":{"path":"HTML/lib/ast/ast.ml","range":{"start":{"line":62,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'pattern_or_op_typed' as follows:\ntype pattern_or_op_typed = (pattern_or_op * typ option)[@@ocaml.doc\n                                                         \" typed pattern or op \"]","location":{"path":"HTML/lib/ast/ast.mli","range":{"start":{"line":97,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun fmt ->\n                                                       fun value ->\n                                                         pp_el fmt value' as \n'pp_el'","location":{"path":"HTML/lib/inferencer/typing.ml","range":{"start":{"line":57,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun map ->\n                                                       fun key ->\n                                                         Base.Map.find map\n                                                           key' as 'Base.Map.find'","location":{"path":"HTML/lib/inferencer/typing.ml","range":{"start":{"line":79,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun x ->\n                                                       fun f -> x >>= f' as \n'(>>=)'","location":{"path":"HTML/lib/inferencer/inferencer.ml","range":{"start":{"line":26,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun subst ->\n                                                       fun key ->\n                                                         Base.Map.remove\n                                                           subst key' as \n'Base.Map.remove'","location":{"path":"HTML/lib/inferencer/inferencer.ml","range":{"start":{"line":96,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun acc ->\n                                                       fun k ->\n                                                         Subst.remove acc k' as \n'Subst.remove'","location":{"path":"HTML/lib/inferencer/inferencer.ml","range":{"start":{"line":176,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun a ->\n                                                       fun res ->\n                                                         tarrow a res' as \n'tarrow'","location":{"path":"HTML/lib/inferencer/inferencer.ml","range":{"start":{"line":529,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun init -> go init' as \n'go'","location":{"path":"HTML/lib/parser/parser.ml","range":{"start":{"line":175,"column":1}}},"severity":"INFO"}
{"message":"Match is redundant. It's recommended to rewrite it as 'if is_there_delim_ahead\nthen\n  choice ?failure_msg:None\n    [(let* typ = delim =?*> pe_type\n       in return (Some typ)); return None]\nelse return None'","location":{"path":"HTML/lib/parser/parser.ml","range":{"start":{"line":227,"column":1}}},"severity":"INFO"}
{"message":"Prefer guard instead of if-then-else in case construction","location":{"path":"HTML/lib/parser/parser.ml","range":{"start":{"line":321,"column":1}}},"severity":"INFO","code":{"value":"use_guard_instead_of_if","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Match is redundant. It's recommended to rewrite it as 'if priority_group.left_associative then chainl1 else chainr1'","location":{"path":"HTML/lib/parser/parser.ml","range":{"start":{"line":332,"column":1}}},"severity":"INFO"}
{"message":"A test without description. Try `let%expect_test \"name\" = ...","location":{"path":"HTML/lib/expect_tests/inference_tests.ml","range":{"start":{"line":14,"column":1}}},"severity":"INFO","code":{"value":"expect_tests_no_names","url":"https://kakadu.github.io/zanuda/"}}
{"message":"A test without description. Try `let%expect_test \"name\" = ...","location":{"path":"HTML/lib/expect_tests/inference_tests.ml","range":{"start":{"line":69,"column":1}}},"severity":"INFO","code":{"value":"expect_tests_no_names","url":"https://kakadu.github.io/zanuda/"}}
{"message":"A test without description. Try `let%expect_test \"name\" = ...","location":{"path":"HTML/lib/expect_tests/inference_tests.ml","range":{"start":{"line":102,"column":1}}},"severity":"INFO","code":{"value":"expect_tests_no_names","url":"https://kakadu.github.io/zanuda/"}}
{"message":"A test without description. Try `let%expect_test \"name\" = ...","location":{"path":"HTML/lib/expect_tests/inference_tests.ml","range":{"start":{"line":115,"column":1}}},"severity":"INFO","code":{"value":"expect_tests_no_names","url":"https://kakadu.github.io/zanuda/"}}
{"message":"A test without description. Try `let%expect_test \"name\" = ...","location":{"path":"HTML/lib/expect_tests/inference_tests.ml","range":{"start":{"line":129,"column":1}}},"severity":"INFO","code":{"value":"expect_tests_no_names","url":"https://kakadu.github.io/zanuda/"}}
{"message":"A test without description. Try `let%expect_test \"name\" = ...","location":{"path":"HTML/lib/expect_tests/inference_tests.ml","range":{"start":{"line":134,"column":1}}},"severity":"INFO","code":{"value":"expect_tests_no_names","url":"https://kakadu.github.io/zanuda/"}}
{"message":"A test without description. Try `let%expect_test \"name\" = ...","location":{"path":"HTML/lib/expect_tests/inference_tests.ml","range":{"start":{"line":178,"column":1}}},"severity":"INFO","code":{"value":"expect_tests_no_names","url":"https://kakadu.github.io/zanuda/"}}
{"message":"A test without description. Try `let%expect_test \"name\" = ...","location":{"path":"HTML/lib/expect_tests/inference_tests.ml","range":{"start":{"line":188,"column":1}}},"severity":"INFO","code":{"value":"expect_tests_no_names","url":"https://kakadu.github.io/zanuda/"}}
{"message":"A test without description. Try `let%expect_test \"name\" = ...","location":{"path":"HTML/lib/expect_tests/inference_tests.ml","range":{"start":{"line":258,"column":1}}},"severity":"INFO","code":{"value":"expect_tests_no_names","url":"https://kakadu.github.io/zanuda/"}}
