{"message":"File 'BasedML/lib/middleend/lambda_lifting.ml' doesn't have corresponding .mli interface","location":{"path":"BasedML/lib/middleend/lambda_lifting.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'BasedML/lib/middleend/closure_conversion.ml' doesn't have corresponding .mli interface","location":{"path":"BasedML/lib/middleend/closure_conversion.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'BasedML/lib/middleend/anf.ml' doesn't have corresponding .mli interface","location":{"path":"BasedML/lib/middleend/anf.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"BasedML/bin/LL.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"BasedML/bin/LL.ml","range":{"start":{"line":2,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"BasedML/bin/LL.ml","range":{"start":{"line":59,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"BasedML/lib/middleend/lambda_lifting.ml","range":{"start":{"line":103,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"BasedML/lib/middleend/lambda_lifting.ml","range":{"start":{"line":114,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun start_state ->\n                                                       f start_state' as \n'f'","location":{"path":"BasedML/lib/middleend/lambda_lifting.ml","range":{"start":{"line":24,"column":1}}},"severity":"INFO"}
{"message":"Match is redundant. It's recommended to rewrite it as 'if Set.mem env name_candidate then new_name env else return name_candidate'","location":{"path":"BasedML/lib/middleend/lambda_lifting.ml","range":{"start":{"line":56,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"BasedML/lib/middleend/lambda_lifting.ml","range":{"start":{"line":103,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"BasedML/lib/middleend/lambda_lifting.ml","range":{"start":{"line":114,"column":1}}},"severity":"INFO"}
{"message":"Using `let ... in` is recommended","location":{"path":"BasedML/lib/middleend/lambda_lifting.ml","range":{"start":{"line":207,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"BasedML/lib/middleend/closure_conversion.ml","range":{"start":{"line":13,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"BasedML/lib/middleend/closure_conversion.ml","range":{"start":{"line":60,"column":1}}},"severity":"INFO"}
{"message":"Consider using `List.fold_left` instead of `tuple_helper`","location":{"path":"BasedML/lib/middleend/closure_conversion.ml","range":{"start":{"line":60,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"BasedML/lib/middleend/closure_conversion.ml","range":{"start":{"line":249,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"BasedML/lib/middleend/closure_conversion.ml","range":{"start":{"line":274,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"BasedML/lib/middleend/closure_conversion.ml","range":{"start":{"line":13,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"BasedML/lib/middleend/closure_conversion.ml","range":{"start":{"line":60,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"BasedML/lib/middleend/closure_conversion.ml","range":{"start":{"line":249,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"BasedML/lib/middleend/closure_conversion.ml","range":{"start":{"line":274,"column":1}}},"severity":"INFO"}
{"message":"Using `let ... in` is recommended","location":{"path":"BasedML/lib/middleend/closure_conversion.ml","range":{"start":{"line":283,"column":1}}},"severity":"INFO"}
{"message":"Consider using `List.fold_left` instead of `init_ctx`","location":{"path":"BasedML/lib/middleend/anf.ml","range":{"start":{"line":134,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun start_state ->\n                                                       f start_state' as \n'f'","location":{"path":"BasedML/lib/middleend/anf.ml","range":{"start":{"line":24,"column":1}}},"severity":"INFO"}
{"message":"Match is redundant. It's recommended to rewrite it as 'if Base.Set.mem global name_candidate\nthen new_name prefix global\nelse return name_candidate'","location":{"path":"BasedML/lib/middleend/anf.ml","range":{"start":{"line":54,"column":1}}},"severity":"INFO"}
{"message":"Using `let ... in` is recommended","location":{"path":"BasedML/lib/middleend/anf.ml","range":{"start":{"line":173,"column":1}}},"severity":"INFO"}
