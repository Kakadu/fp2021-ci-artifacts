{"message":"File 'slarnML/lib/inferencer/typedtree.ml' doesn't have corresponding .mli interface","location":{"path":"slarnML/lib/inferencer/typedtree.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'slarnML/lib/riscv64/riscv.ml' doesn't have corresponding .mli interface","location":{"path":"slarnML/lib/riscv64/riscv.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'slarnML/lib/res.ml' doesn't have corresponding .mli interface","location":{"path":"slarnML/lib/res.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'slarnML/lib/inferencer/quick_check.ml' doesn't have corresponding .mli interface","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'slarnML/lib/pretty_print/pprint_riscv.ml' doesn't have corresponding .mli interface","location":{"path":"slarnML/lib/pretty_print/pprint_riscv.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'slarnML/lib/pretty_print/pprint_ll.ml' doesn't have corresponding .mli interface","location":{"path":"slarnML/lib/pretty_print/pprint_ll.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'slarnML/lib/pretty_print/pprint_cc.ml' doesn't have corresponding .mli interface","location":{"path":"slarnML/lib/pretty_print/pprint_cc.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'slarnML/lib/pretty_print/pprint_anf.ml' doesn't have corresponding .mli interface","location":{"path":"slarnML/lib/pretty_print/pprint_anf.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'slarnML/lib/pretty_print/pprint.ml' doesn't have corresponding .mli interface","location":{"path":"slarnML/lib/pretty_print/pprint.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'slarnML/lib/riscv64/call_define.ml' doesn't have corresponding .mli interface","location":{"path":"slarnML/lib/riscv64/call_define.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"slarnML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"slarnML/test/parser_test.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"slarnML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"slarnML/test/clos_conv_test.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"slarnML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"slarnML/test/lambda_lifting_test.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"slarnML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"slarnML/test/anf_conv_test.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Extranous `@@`.","location":{"path":"slarnML/test/riscv64_instr_test.ml","range":{"start":{"line":21,"column":1}}},"severity":"INFO","code":{"value":"camel_extra_dollar","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"slarnML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"slarnML/test/riscv64_instr_test.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Type name `constTy` should be in snake case","location":{"path":"slarnML/lib/inferencer/typedtree.ml","range":{"start":{"line":11,"column":1}}},"severity":"INFO","code":{"value":"camel_cased_types","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Type name `undefinedType` should be in snake case","location":{"path":"slarnML/lib/inferencer/typedtree.ml","range":{"start":{"line":22,"column":1}}},"severity":"INFO","code":{"value":"camel_cased_types","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"slarnML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"slarnML/lib/riscv64/riscv_ast.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/riscv64/riscv.ml","range":{"start":{"line":125,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/riscv64/riscv.ml","range":{"start":{"line":129,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/riscv64/riscv.ml","range":{"start":{"line":205,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"slarnML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"slarnML/lib/riscv64/riscv.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/riscv64/riscv.ml","range":{"start":{"line":125,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/riscv64/riscv.ml","range":{"start":{"line":129,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/riscv64/riscv.ml","range":{"start":{"line":205,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"slarnML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"slarnML/lib/res.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor `Error` of this type should not look like defaults","location":{"path":"slarnML/lib/res.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"ambiguous_constructors","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check_ast.ml","range":{"start":{"line":6,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":82,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":11,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":12,"column":1}}},"severity":"INFO"}
{"message":"","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":39,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":39,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":39,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":39,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":39,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":41,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":41,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":41,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":47,"column":1}}},"severity":"INFO"}
{"message":"","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":52,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":52,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":52,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":79,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":82,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":88,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":150,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":151,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":151,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":158,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/inferencer/quick_check.ml","range":{"start":{"line":172,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"slarnML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"slarnML/lib/pretty_print/pprint_riscv.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/pretty_print/pprint_ll.ml","range":{"start":{"line":9,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/pretty_print/pprint_ll.ml","range":{"start":{"line":9,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/pretty_print/pprint_cc.ml","range":{"start":{"line":8,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/pretty_print/pprint_cc.ml","range":{"start":{"line":8,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/pretty_print/pprint_ast.ml","range":{"start":{"line":22,"column":1}}},"severity":"INFO"}
{"message":"Prefer guard instead of if-then-else in case construction","location":{"path":"slarnML/lib/pretty_print/pprint_ast.ml","range":{"start":{"line":12,"column":1}}},"severity":"INFO","code":{"value":"use_guard_instead_of_if","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/pretty_print/pprint_ast.ml","range":{"start":{"line":22,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/pretty_print/pprint.ml","range":{"start":{"line":148,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun ast ->\n                                                       lambda_lifting ast' as \n'lambda_lifting'","location":{"path":"slarnML/lib/pretty_print/pprint.ml","range":{"start":{"line":56,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/pretty_print/pprint.ml","range":{"start":{"line":148,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun ast ->\n                                                       lambda_lifting ast' as \n'lambda_lifting'","location":{"path":"slarnML/lib/pretty_print/pprint.ml","range":{"start":{"line":156,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun init -> go init' as \n'go'","location":{"path":"slarnML/lib/parser/parser.ml","range":{"start":{"line":135,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/anf/lambda_lifting.ml","range":{"start":{"line":157,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/anf/lambda_lifting.ml","range":{"start":{"line":157,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"slarnML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"slarnML/lib/anf/lambda_lifting.mli","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/anf/clos_conv.ml","range":{"start":{"line":19,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/anf/clos_conv.ml","range":{"start":{"line":208,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/anf/clos_conv.ml","range":{"start":{"line":19,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"slarnML/lib/anf/clos_conv.ml","range":{"start":{"line":208,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"slarnML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"slarnML/lib/anf/clos_conv.mli","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"slarnML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"slarnML/lib/riscv64/call_define.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/anf/anf_conv.ml","range":{"start":{"line":11,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/anf/anf_conv.ml","range":{"start":{"line":11,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/anf/anf_conv.ml","range":{"start":{"line":12,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/anf/anf_conv.ml","range":{"start":{"line":16,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"slarnML/lib/anf/anf_conv.ml","range":{"start":{"line":17,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"slarnML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"slarnML/lib/anf/anf_conv.mli","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
