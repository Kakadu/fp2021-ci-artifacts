{"message":"File 'OcamlADT/tests/infer.ml' doesn't have corresponding .mli interface","location":{"path":"OcamlADT/tests/infer.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"OcamlADT/lib/pprinter.ml","range":{"start":{"line":57,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"OcamlADT/lib/pprinter.ml","range":{"start":{"line":57,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OcamlADT/lib/pprinter.ml","range":{"start":{"line":276,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OcamlADT/lib/parser.ml","range":{"start":{"line":202,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"OcamlADT/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OcamlADT/lib/inferTypes.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"OcamlADT/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OcamlADT/lib/inferTypes.mli","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"OcamlADT/lib/infer.ml","range":{"start":{"line":702,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"OcamlADT/lib/infer.ml","range":{"start":{"line":723,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"OcamlADT/lib/infer.ml","range":{"start":{"line":754,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"OcamlADT/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OcamlADT/lib/infer.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun acc ->\n                                                       fun h -> helper acc h' as \n'helper'","location":{"path":"OcamlADT/lib/infer.ml","range":{"start":{"line":91,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun acc ->\n                                                       fun h -> helper acc h' as \n'helper'","location":{"path":"OcamlADT/lib/infer.ml","range":{"start":{"line":93,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun sub ->\n                                                       fun k ->\n                                                         Base.Map.remove sub\n                                                           k' as 'Base.Map.remove'","location":{"path":"OcamlADT/lib/infer.ml","range":{"start":{"line":252,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OcamlADT/lib/infer.ml","range":{"start":{"line":341,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OcamlADT/lib/infer.ml","range":{"start":{"line":681,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"OcamlADT/lib/infer.ml","range":{"start":{"line":702,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"OcamlADT/lib/infer.ml","range":{"start":{"line":723,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OcamlADT/lib/infer.ml","range":{"start":{"line":726,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"OcamlADT/lib/infer.ml","range":{"start":{"line":754,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OcamlADT/lib/infer.ml","range":{"start":{"line":757,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"OcamlADT/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OcamlADT/lib/infer.mli","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Const_integer' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":35,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Const_char' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":36,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Const_string' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":37,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Type_arrow' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":48,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Type_var' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":49,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Type_tuple' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":50,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Type_construct' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":51,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Pat_constraint' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":64,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Pat_any' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":65,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Pat_var' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":66,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Pat_constant' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":67,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Pat_tuple' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":68,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Pat_construct' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":69,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Nonrecursive' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":82,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Recursive' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":83,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Exp_ident' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":132,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Exp_constant' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":133,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Exp_tuple' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":134,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Exp_function' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":135,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Exp_fun' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":136,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Exp_apply' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":137,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Exp_match' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":138,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Exp_constraint' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":139,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Exp_if' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":140,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Exp_let' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":141,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Exp_construct' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":142,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Str_eval' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":155,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Str_value' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":156,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Str_adt' has no documentation attribute","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":157,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"OcamlADT/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OcamlADT/lib/ast.mli","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"OcamlADT/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OcamlADT/tests/infer.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
