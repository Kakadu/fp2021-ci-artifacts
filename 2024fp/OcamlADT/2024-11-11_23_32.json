{"message":"File 'OcamlADT/tests/qcheckt.ml' doesn't have corresponding .mli interface","location":{"path":"OcamlADT/tests/qcheckt.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OcamlADT/tests/pprinter.ml' doesn't have corresponding .mli interface","location":{"path":"OcamlADT/tests/pprinter.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OcamlADT/tests/parser.ml' doesn't have corresponding .mli interface","location":{"path":"OcamlADT/tests/parser.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OcamlADT/tests/expressiont.ml' doesn't have corresponding .mli interface","location":{"path":"OcamlADT/tests/expressiont.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OcamlADT/tests/basict.ml' doesn't have corresponding .mli interface","location":{"path":"OcamlADT/tests/basict.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OcamlADT/tests/astpprinter.ml' doesn't have corresponding .mli interface","location":{"path":"OcamlADT/tests/astpprinter.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"OcamlADT/repl/REPL.ml","range":{"start":{"line":14,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OcamlADT/lib/parser.ml","range":{"start":{"line":382,"column":1}}},"severity":"INFO"}
{"message":"Executing 'if ... then .. else true' smells bad\n","location":{"path":"OcamlADT/tests/qcheckt.ml","range":{"start":{"line":187,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OcamlADT/tests/qcheckt.ml","range":{"start":{"line":199,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OcamlADT/tests/qcheckt.ml","range":{"start":{"line":210,"column":1}}},"severity":"INFO"}
{"message":"Unsafe ingore. It's recommended to rewrite it as 'let (_: int) = run_tests ?handler:None ?colors:None ?verbose:(Some true)\n                 ?long:None ?debug_shrink:None ?debug_shrink_list:None\n                 ?out:None ?rand:None [test_round_trip]'","location":{"path":"OcamlADT/tests/qcheckt.ml","range":{"start":{"line":212,"column":1}}},"severity":"INFO"}
{"message":"","location":{"path":"OcamlADT/tests/astpprinter.ml","range":{"start":{"line":11,"column":1}}},"severity":"INFO"}
