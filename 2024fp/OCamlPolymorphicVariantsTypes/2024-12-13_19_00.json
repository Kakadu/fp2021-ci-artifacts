{"message":"File 'OCamlPolymorphicVariantsTypes/lib/typedtree.ml' doesn't have corresponding .mli interface","location":{"path":"OCamlPolymorphicVariantsTypes/lib/typedtree.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OCamlPolymorphicVariantsTypes/lib/inferencer.ml' doesn't have corresponding .mli interface","location":{"path":"OCamlPolymorphicVariantsTypes/lib/inferencer.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"OCamlPolymorphicVariantsTypes/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OCamlPolymorphicVariantsTypes/lib/typedtree.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Consider using `List.fold_left` instead of `builder`","location":{"path":"OCamlPolymorphicVariantsTypes/lib/parser.ml","range":{"start":{"line":138,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun id -> preturn id' as \n'preturn'","location":{"path":"OCamlPolymorphicVariantsTypes/lib/parser.ml","range":{"start":{"line":42,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun id -> preturn id' as \n'preturn'","location":{"path":"OCamlPolymorphicVariantsTypes/lib/parser.ml","range":{"start":{"line":43,"column":1}}},"severity":"INFO"}
{"message":"Prefer guard instead of if-then-else in case construction","location":{"path":"OCamlPolymorphicVariantsTypes/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"use_guard_instead_of_if","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun id -> preturn id' as \n'preturn'","location":{"path":"OCamlPolymorphicVariantsTypes/lib/parser.ml","range":{"start":{"line":241,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun id -> preturn id' as \n'preturn'","location":{"path":"OCamlPolymorphicVariantsTypes/lib/parser.ml","range":{"start":{"line":250,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun acc ->\n                                                       fun t -> helper acc t' as \n'helper'","location":{"path":"OCamlPolymorphicVariantsTypes/lib/inferencer.ml","range":{"start":{"line":124,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun s ->\n                                                       fun k -> Map.find s k' as \n'Map.find'","location":{"path":"OCamlPolymorphicVariantsTypes/lib/inferencer.ml","range":{"start":{"line":157,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun s ->\n                                                       fun k ->\n                                                         Map.remove s k' as \n'Map.remove'","location":{"path":"OCamlPolymorphicVariantsTypes/lib/inferencer.ml","range":{"start":{"line":158,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun e ->\n                                                       fun k ->\n                                                         Map.remove e k' as \n'Map.remove'","location":{"path":"OCamlPolymorphicVariantsTypes/lib/inferencer.ml","range":{"start":{"line":240,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlPolymorphicVariantsTypes/lib/inferencer.ml","range":{"start":{"line":301,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlPolymorphicVariantsTypes/lib/inferencer.ml","range":{"start":{"line":319,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlPolymorphicVariantsTypes/lib/inferencer.ml","range":{"start":{"line":349,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlPolymorphicVariantsTypes/lib/inferencer.ml","range":{"start":{"line":350,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlPolymorphicVariantsTypes/lib/inferencer.ml","range":{"start":{"line":351,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlPolymorphicVariantsTypes/lib/inferencer.ml","range":{"start":{"line":352,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlPolymorphicVariantsTypes/lib/inferencer.ml","range":{"start":{"line":371,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlPolymorphicVariantsTypes/lib/inferencer.ml","range":{"start":{"line":380,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'expression', 'case', 'value_binding', 'definition' as follows:\ntype expression =\n  | Const of literal \n  | Variable of identifier \n  | Unary of unary_operator * expression \n  | Binary of expression * binary_operator * expression \n  | Tuple of expression * expression * expression list \n  | ExpressionsList of expression list \n  | Construct of identifier * expression option \n  | Match of expression * case list \n  | If of expression * expression * expression option \n  | Lambda of pattern list * expression \n  | Func of case list \n  | Apply of expression * expression list \n  | Define of definition * expression \n  | ExpressionBlock of expression list [@@deriving\n                                         show { with_path = false }]\nand case = {\n  pattern: pattern ;\n  filter: expression option ;\n  result: expression }[@@deriving show { with_path = false }]\nand value_binding = (pattern * expression)[@@deriving\n                                            show { with_path = false }]\nand definition = (recursive_type * value_binding list)[@@deriving\n                                                        show\n                                                          { with_path = false\n                                                          }]","location":{"path":"OCamlPolymorphicVariantsTypes/lib/ast.ml","range":{"start":{"line":52,"column":1}}},"severity":"INFO"}
