{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"Haskell/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"Haskell/lib/ast.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'binding', 'bindingbody', 'binary_tree_bld', 'expression', 'expr', 'ordinarylistbld', 'listbld' as follows:\ntype binding =\n  | VarsBind of pattern * bindingbody * binding list\n  [@ocaml.doc \" e.g [x = let y = 12 in y * z where z = 5] \"]\n  | FunBind of (ident * functype option) * pattern * pattern list *\n  bindingbody * binding list\n  [@ocaml.doc \" e.g [f x y = x + y + z where z = 2 ]\"][@@deriving\n                                                        show\n                                                          { with_path = false\n                                                          }]\nand bindingbody =\n  | Guards of (expr * expr) * (expr * expr) list\n  [@ocaml.doc\n    \" (condition, branch) pairs e.g [f x | x > 0 = x | otherwise = -1] \"]\n  | OrdBody of expr [@ocaml.doc \" e.g [f x = if x > 0 then x else -1] \"]\n[@@ocaml.doc \" examples below are for function binding with due body \"]\n[@@deriving show { with_path = false }]\nand binary_tree_bld =\n  | Nul [@ocaml.doc \" node that not exists (notation: [$]) \"]\n  | Node of expr * binary_tree_bld * binary_tree_bld\n  [@ocaml.doc \" node is data and two 'sons' e.g  [(x^y; $; (2; $; $))] \"]\n[@@deriving show { with_path = false }]\nand expression =\n  | Const of const \n  | Identificator of ident [@ocaml.doc \" e.g  [x] \"]\n  | TupleBld of expr * expr * expr list [@ocaml.doc \" e.g  [(1+3, f x)] \"]\n  | OptionBld of expr maybe [@ocaml.doc \" e.g  [Just (f x)] \"]\n  | ListBld of expr list [@ocaml.doc \" e.g [[(2 ^ 2 - 3) ..]] \"]\n  | Binop of expr * binop * expr [@ocaml.doc \" e.g [1 > 0] \"]\n  | Unop of unop * expr [@ocaml.doc \" e.g [(-1)] \"]\n  | IfThenEsle of expr * expr * expr\n  [@ocaml.doc \" e.g [if x >= 0 then x else (-x)] \"]\n  | FunctionApply of expr * expr * expr list\n  [@ocaml.doc \" e.g. [sum 1 2 or \\\\x -> x + 1) 1] \"]\n  | Lambda of pattern * pattern list * expr\n  [@ocaml.doc \" e.g. [\\\\x y -> x + y] \"]\n  | BinTreeBld of binary_tree_bld \n  | Case of pattern * (pattern * expr) * (pattern * expr) list\n  [@ocaml.doc \" e.g [case l of\\n      (x:xs) -> x\\n      [] -> 0] \"]\n  | InnerBindings of binding * binding list * expr\n  [@ocaml.doc\n    \" e.g.\\n      [let\\n        x = 1\\n        y = 2\\n      in\\n      x + y] \"]\n[@@deriving show { with_path = false }]\nand expr = (expression * tp option)[@@ocaml.doc \" e.g. [(x + 1) :: Int]\"]\n[@@deriving show { with_path = false }]\ntype ordinarylistbld =\n  | ComprehensionList of expr * comprehension * comprehension list\n  [@ocaml.doc\n    \" e.g [[x * y | x <- [1, 10, 100], y <- [2, 3]], y mod 2 == 0] \"]\n  | IncomprehensionlList of expr [@ocaml.doc \"e.g. [[1,2]] \"][@@deriving\n                                                               show\n                                                                 {\n                                                                   with_path\n                                                                    = false\n                                                                 }]\ntype listbld =\n  | LazyList of expr * expr option * expr option\n  [@ocaml.doc \" e.g. [[1.. ] or [1..10] or [1, 2 .. 10] or [1, 3..]] \"]\n  | OrdList of ordinarylistbld [@@deriving show { with_path = false }]","location":{"path":"Haskell/lib/ast.ml","range":{"start":{"line":73,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite it as '__5'","location":{"path":"Haskell/lib/ast.ml","range":{"start":{"line":115,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite it as '__5'","location":{"path":"Haskell/lib/ast.ml","range":{"start":{"line":115,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite it as '__5'","location":{"path":"Haskell/lib/ast.ml","range":{"start":{"line":115,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite it as '__5'","location":{"path":"Haskell/lib/ast.ml","range":{"start":{"line":115,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite it as '__5'","location":{"path":"Haskell/lib/ast.ml","range":{"start":{"line":115,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite it as '__5'","location":{"path":"Haskell/lib/ast.ml","range":{"start":{"line":115,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite it as '__5'","location":{"path":"Haskell/lib/ast.ml","range":{"start":{"line":115,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite it as '__5'","location":{"path":"Haskell/lib/ast.ml","range":{"start":{"line":115,"column":1}}},"severity":"INFO"}
