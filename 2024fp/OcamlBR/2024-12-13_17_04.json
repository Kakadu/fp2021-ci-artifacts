{"message":"File 'OcamlBR/lib/inferencer_tests.ml' doesn't have corresponding .mli interface","location":{"path":"OcamlBR/lib/inferencer_tests.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"","location":{"path":"OcamlBR/lib/typedtree.ml","range":{"start":{"line":62,"column":1}}},"severity":"INFO"}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OcamlBR/lib/typedtree.mli","range":{"start":{"line":4,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"OcamlBR/lib/pr_printer.ml","range":{"start":{"line":9,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"OcamlBR/lib/pr_printer.ml","range":{"start":{"line":9,"column":1}}},"severity":"INFO"}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OcamlBR/lib/inferencer.ml","range":{"start":{"line":4,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun subst ->\n                                                       fun v ->\n                                                         Map.find subst v' as \n'Map.find'","location":{"path":"OcamlBR/lib/inferencer.ml","range":{"start":{"line":159,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun subst ->\n                                                       fun v ->\n                                                         Map.remove subst v' as \n'Map.remove'","location":{"path":"OcamlBR/lib/inferencer.ml","range":{"start":{"line":160,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun t1 ->\n                                                       fun t2 -> unify t1 t2' as \n'unify'","location":{"path":"OcamlBR/lib/inferencer.ml","range":{"start":{"line":191,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OcamlBR/lib/inferencer.ml","range":{"start":{"line":338,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OcamlBR/lib/inferencer.ml","range":{"start":{"line":343,"column":1}}},"severity":"INFO"}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OcamlBR/lib/inferencer.mli","range":{"start":{"line":4,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
