{"message":"File 'OCamlWeakTypeVariables/lib/types.ml' doesn't have corresponding .mli interface","location":{"path":"OCamlWeakTypeVariables/lib/types.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OCamlWeakTypeVariables/lib/infer_print.ml' doesn't have corresponding .mli interface","location":{"path":"OCamlWeakTypeVariables/lib/infer_print.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OCamlWeakTypeVariables/lib/infer.ml' doesn't have corresponding .mli interface","location":{"path":"OCamlWeakTypeVariables/lib/infer.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"OCamlWeakTypeVariables/lib/config.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OCamlWeakTypeVariables/lib/config.ml","range":{"start":{"line":2,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"OCamlWeakTypeVariables/lib/config.mli","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OCamlWeakTypeVariables/lib/config.mli","range":{"start":{"line":2,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"OCamlWeakTypeVariables/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OCamlWeakTypeVariables/lib/types.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"A test without description. Try `let%expect_test \"name\" = ...","location":{"path":"OCamlWeakTypeVariables/lib/infer_print.ml","range":{"start":{"line":86,"column":1}}},"severity":"INFO","code":{"value":"expect_tests_no_names","url":"https://kakadu.github.io/zanuda/"}}
{"message":"A test without description. Try `let%expect_test \"name\" = ...","location":{"path":"OCamlWeakTypeVariables/lib/infer_print.ml","range":{"start":{"line":91,"column":1}}},"severity":"INFO","code":{"value":"expect_tests_no_names","url":"https://kakadu.github.io/zanuda/"}}
{"message":"A test without description. Try `let%expect_test \"name\" = ...","location":{"path":"OCamlWeakTypeVariables/lib/infer_print.ml","range":{"start":{"line":96,"column":1}}},"severity":"INFO","code":{"value":"expect_tests_no_names","url":"https://kakadu.github.io/zanuda/"}}
{"message":"A test without description. Try `let%expect_test \"name\" = ...","location":{"path":"OCamlWeakTypeVariables/lib/infer_print.ml","range":{"start":{"line":101,"column":1}}},"severity":"INFO","code":{"value":"expect_tests_no_names","url":"https://kakadu.github.io/zanuda/"}}
{"message":"A test without description. Try `let%expect_test \"name\" = ...","location":{"path":"OCamlWeakTypeVariables/lib/infer_print.ml","range":{"start":{"line":109,"column":1}}},"severity":"INFO","code":{"value":"expect_tests_no_names","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"OCamlWeakTypeVariables/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OCamlWeakTypeVariables/lib/infer_print.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Prefer guard instead of if-then-else in case construction","location":{"path":"OCamlWeakTypeVariables/lib/infer_print.ml","range":{"start":{"line":16,"column":1}}},"severity":"INFO","code":{"value":"use_guard_instead_of_if","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Prefer guard instead of if-then-else in case construction","location":{"path":"OCamlWeakTypeVariables/lib/infer_print.ml","range":{"start":{"line":46,"column":1}}},"severity":"INFO","code":{"value":"use_guard_instead_of_if","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"OCamlWeakTypeVariables/lib/infer.ml","range":{"start":{"line":472,"column":1}}},"severity":"INFO"}
{"message":"Extranous `@@`.","location":{"path":"OCamlWeakTypeVariables/lib/infer.ml","range":{"start":{"line":577,"column":1}}},"severity":"INFO","code":{"value":"camel_extra_dollar","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Extranous `@@`.","location":{"path":"OCamlWeakTypeVariables/lib/infer.ml","range":{"start":{"line":726,"column":1}}},"severity":"INFO","code":{"value":"camel_extra_dollar","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"OCamlWeakTypeVariables/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OCamlWeakTypeVariables/lib/infer.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlWeakTypeVariables/lib/infer.ml","range":{"start":{"line":102,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun env ->\n                                                       fun key ->\n                                                         Base.Map.find env\n                                                           key' as 'Base.Map.find'","location":{"path":"OCamlWeakTypeVariables/lib/infer.ml","range":{"start":{"line":295,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun env ->\n                                                       fun key ->\n                                                         Base.Map.find_exn\n                                                           env key' as \n'Base.Map.find_exn'","location":{"path":"OCamlWeakTypeVariables/lib/infer.ml","range":{"start":{"line":296,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun env ->\n                                                       fun key ->\n                                                         Base.Map.remove env\n                                                           key' as 'Base.Map.remove'","location":{"path":"OCamlWeakTypeVariables/lib/infer.ml","range":{"start":{"line":297,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlWeakTypeVariables/lib/infer.ml","range":{"start":{"line":435,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"OCamlWeakTypeVariables/lib/infer.ml","range":{"start":{"line":472,"column":1}}},"severity":"INFO"}
{"message":"Match is redundant. It's recommended to rewrite it as 'if debug\nthen\n  (Format.printf\n     (CamlinternalFormatBasics.Format\n        ((CamlinternalFormatBasics.String_literal\n            (\"Env: \\n\",\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Char_literal\n                    ('\\n', CamlinternalFormatBasics.End_of_format))))),\n          \"Env: \\n%a\\n\")) TypeEnv.pp env';\n   List.iter\n     (fun sub ->\n        Format.printf\n          (CamlinternalFormatBasics.Format\n             ((CamlinternalFormatBasics.String_literal\n                 (\"Sub: \",\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Char_literal\n                         ('\\n', CamlinternalFormatBasics.End_of_format))))),\n               \"Sub: %a\\n\")) Subst.pp sub) subs;\n   List.iter\n     (fun t ->\n        Format.printf\n          (CamlinternalFormatBasics.Format\n             ((CamlinternalFormatBasics.String_literal\n                 (\"Type: \",\n                   (CamlinternalFormatBasics.Alpha\n                      (CamlinternalFormatBasics.Char_literal\n                         ('\\n', CamlinternalFormatBasics.End_of_format))))),\n               \"Type: %a\\n\")) Infer_print.pp_typ_my t) ts;\n   Format.printf\n     (CamlinternalFormatBasics.Format\n        ((CamlinternalFormatBasics.String_literal\n            (\"Sub: \",\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Char_literal\n                    ('\\n', CamlinternalFormatBasics.End_of_format))))),\n          \"Sub: %a\\n\")) Subst.pp sub;\n   Format.printf\n     (CamlinternalFormatBasics.Format\n        ((CamlinternalFormatBasics.String_literal\n            (\"Env: \",\n              (CamlinternalFormatBasics.Alpha\n                 (CamlinternalFormatBasics.Char_literal\n                    ('\\n', CamlinternalFormatBasics.End_of_format))))),\n          \"Env: %a\\n\")) TypeEnv.pp env'';\n   return (t, sub'))\nelse return (t, sub)'","location":{"path":"OCamlWeakTypeVariables/lib/infer.ml","range":{"start":{"line":595,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlWeakTypeVariables/lib/infer.ml","range":{"start":{"line":606,"column":1}}},"severity":"INFO"}
