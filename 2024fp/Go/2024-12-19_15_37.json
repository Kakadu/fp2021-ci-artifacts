{"message":"File 'Go/lib/typecheck/typeChecker.ml' doesn't have corresponding .mli interface","location":{"path":"Go/lib/typecheck/typeChecker.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Go/lib/typecheck/typeCheckMonad.ml' doesn't have corresponding .mli interface","location":{"path":"Go/lib/typecheck/typeCheckMonad.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Go/lib/typecheck/typeCheckErrors.ml' doesn't have corresponding .mli interface","location":{"path":"Go/lib/typecheck/typeCheckErrors.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun x -> f x' as \n'f'","location":{"path":"Go/lib/typecheck/typeChecker.ml","range":{"start":{"line":35,"column":1}}},"severity":"INFO"}
{"message":"Match is redundant. It's recommended to rewrite it as 'if e el1 el2\nthen return el1\nelse fail (TypeCheckError (Mismatched_types \"Types mismatched in binoper\"))'","location":{"path":"Go/lib/typecheck/typeChecker.ml","range":{"start":{"line":66,"column":1}}},"severity":"INFO"}
{"message":"Match is redundant. It's recommended to rewrite it as 'if equal_ctype t1 t2\nthen return ()\nelse fail (TypeCheckError (Mismatched_types \"Types mismatched in binoper\"))'","location":{"path":"Go/lib/typecheck/typeChecker.ml","range":{"start":{"line":74,"column":1}}},"severity":"INFO"}
{"message":"Prefer guard instead of if-then-else in case construction","location":{"path":"Go/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"use_guard_instead_of_if","url":"https://kakadu.github.io/zanuda/"}}
{"message":"","location":{"path":"Go/lib/typecheck/typeChecker.ml","range":{"start":{"line":154,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun x ->\n                                                       fun y -> env_l x y' as \n'env_l'","location":{"path":"Go/lib/typecheck/typeChecker.ml","range":{"start":{"line":155,"column":1}}},"severity":"INFO"}
{"message":"Match is redundant. It's recommended to rewrite it as 'if (List.length x) = (List.length y)\nthen return (List.combine x (List.map (fun x -> Ctype x) y))\nelse fail (TypeCheckError (Mismatched_types \"func return types mismatch\"))'","location":{"path":"Go/lib/typecheck/typeChecker.ml","range":{"start":{"line":228,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun st -> f st' as \n'f'","location":{"path":"Go/lib/typecheck/typeCheckMonad.ml","range":{"start":{"line":81,"column":1}}},"severity":"INFO"}
