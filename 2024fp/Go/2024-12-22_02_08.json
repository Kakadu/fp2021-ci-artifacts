{"message":"Eta reduction proposed. It's recommended to rewrite 'fun st -> f st' as \n'f'","location":{"path":"Go/lib/baseMonad/baseMonad.ml","range":{"start":{"line":48,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun stmt -> cstmt stmt' as \n'cstmt'","location":{"path":"Go/lib/typecheck/typeChecker.ml","range":{"start":{"line":18,"column":1}}},"severity":"INFO"}
{"message":"Match is redundant. It's recommended to rewrite it as 'if equal_ctype t1 t2\nthen return t1\nelse\n  fail (Type_check_error (Mismatched_types \"Types mismatched in equation\"))'","location":{"path":"Go/lib/typecheck/typeChecker.ml","range":{"start":{"line":43,"column":1}}},"severity":"INFO"}
{"message":"Match is redundant. It's recommended to rewrite it as 'if equal_ctype t1 t2\nthen return ()\nelse\n  fail (Type_check_error (Mismatched_types \"Types mismatched in equation\"))'","location":{"path":"Go/lib/typecheck/typeChecker.ml","range":{"start":{"line":49,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun id ->\n                                                       fun t ->\n                                                         save_ident id t' as \n'save_ident'","location":{"path":"Go/lib/typecheck/typeChecker.ml","range":{"start":{"line":153,"column":1}}},"severity":"INFO"}
{"message":"Match is redundant. It's recommended to rewrite it as 'if (List.length (fst :: snd :: tl)) = (List.length types)\nthen\n  iter (fun (id, tp) -> save_local_ident id (Ctype tp))\n    (List.combine (fst :: snd :: tl) types)\nelse\n  fail\n    (Type_check_error\n       (Mismatched_types\n          \"function returns wrong number of elements in multiple var decl\"))'","location":{"path":"Go/lib/typecheck/typeChecker.ml","range":{"start":{"line":175,"column":1}}},"severity":"INFO"}
{"message":"Match is redundant. It's recommended to rewrite it as 'if (List.length types) = (List.length (l1 :: l2 :: ls))\nthen\n  iter2\n    (fun lvalue ->\n       fun t -> (retrieve_lvalue cstmt lvalue) >>= (check_eq (Ctype t))) (l1\n    :: l2 :: ls) types\nelse fail (Type_check_error (Cannot_assign \"Multiple return assign failed\"))'","location":{"path":"Go/lib/typecheck/typeChecker.ml","range":{"start":{"line":212,"column":1}}},"severity":"INFO"}
{"message":"Match is redundant. It's recommended to rewrite it as 'if (List.length exprs) = (List.length rtv)\nthen return (List.combine exprs (List.map (fun t -> Ctype t) rtv))\nelse fail (Type_check_error (Mismatched_types \"func return types mismatch\"))'","location":{"path":"Go/lib/typecheck/typeChecker.ml","range":{"start":{"line":260,"column":1}}},"severity":"INFO"}
