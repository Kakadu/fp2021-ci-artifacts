{"message":"File 'Go/tests/parser/pp/ppUnitTests.ml' doesn't have corresponding .mli interface","location":{"path":"Go/tests/parser/pp/ppUnitTests.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Go/tests/parser/unitTests/topLevelTest.ml' doesn't have corresponding .mli interface","location":{"path":"Go/tests/parser/unitTests/topLevelTest.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Go/tests/parser/unitTests/stmtTest.ml' doesn't have corresponding .mli interface","location":{"path":"Go/tests/parser/unitTests/stmtTest.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Go/tests/parser/unitTests/pp.ml' doesn't have corresponding .mli interface","location":{"path":"Go/tests/parser/unitTests/pp.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Go/tests/parser/unitTests/exprTest.ml' doesn't have corresponding .mli interface","location":{"path":"Go/tests/parser/unitTests/exprTest.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Go/tests/parser/unitTests/commonTest.ml' doesn't have corresponding .mli interface","location":{"path":"Go/tests/parser/unitTests/commonTest.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Go/tests/parser/qCheck/astGenerator.ml","range":{"start":{"line":46,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Go/tests/parser/qCheck/astGenerator.ml","range":{"start":{"line":171,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Go/tests/parser/qCheck/astGenerator.ml","range":{"start":{"line":230,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Go/tests/parser/qCheck/astGenerator.ml","range":{"start":{"line":330,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Go/tests/parser/qCheck/astGenerator.ml","range":{"start":{"line":46,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Go/tests/parser/qCheck/astGenerator.ml","range":{"start":{"line":171,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Go/tests/parser/qCheck/astGenerator.ml","range":{"start":{"line":230,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Go/tests/parser/qCheck/astGenerator.ml","range":{"start":{"line":330,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'return_values' as follows:\ntype return_values =\n  | Only_types of type' list\n  [@ocaml.doc \" i.e.  [(int, bool, string)], [int]\"]\n  | Ident_and_types of (ident * type') list\n  [@ocaml.doc\n    \" i.e.  [(a int, b string)], [(a , b int, c string)].\\n      The second example will be processed at parsing as [(a int, b int, c string)] \"]\n[@@ocaml.doc\n  \" Constructors for possible return constructions of a function.\\n    Invariant: sizes of all lists are >= 1 \"]\n[@@deriving show { with_path = false }]","location":{"path":"Go/lib/ast/ast.ml","range":{"start":{"line":54,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Go/lib/parser/stmt.ml","range":{"start":{"line":120,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"Go/lib/parser/stmt.ml","range":{"start":{"line":14,"column":1}}},"severity":"INFO"}
{"message":"Bad measurement of a list (with non-negative size)\nBetween 'List.length lvalues' and '0'.","location":{"path":"Go/lib/parser/stmt.ml","range":{"start":{"line":32,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"Go/lib/parser/stmt.ml","range":{"start":{"line":52,"column":1}}},"severity":"INFO"}
{"message":"Bad measurement of a list (with non-negative size)\nBetween 'List.length lvalues' and '0'.","location":{"path":"Go/lib/parser/stmt.ml","range":{"start":{"line":59,"column":1}}},"severity":"INFO"}
{"message":"Bad measurement of a list (with non-negative size)\nBetween 'List.length rvalues' and '0'.","location":{"path":"Go/lib/parser/stmt.ml","range":{"start":{"line":59,"column":1}}},"severity":"INFO"}
{"message":"Bad measurement of a list (with non-negative size)\nBetween 'List.length lvalues' and '0'.","location":{"path":"Go/lib/parser/stmt.ml","range":{"start":{"line":95,"column":1}}},"severity":"INFO"}
{"message":"Bad measurement of a list (with non-negative size)\nBetween 'List.length rvalues' and '0'.","location":{"path":"Go/lib/parser/stmt.ml","range":{"start":{"line":95,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Go/lib/parser/stmt.ml","range":{"start":{"line":120,"column":1}}},"severity":"INFO"}
{"message":"Executing 'if ... then true' smells bad\n","location":{"path":"Go/lib/parser/stmt.ml","range":{"start":{"line":184,"column":1}}},"severity":"INFO"}
{"message":"Executing 'if ... then true' smells bad\n","location":{"path":"Go/lib/parser/stmt.ml","range":{"start":{"line":194,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"Go/lib/parser/stmt.ml","range":{"start":{"line":248,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun init -> go init' as \n'go'","location":{"path":"Go/lib/parser/expr.ml","range":{"start":{"line":11,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun num ->\n                                                       Int.of_string num' as \n'Int.of_string'","location":{"path":"Go/lib/parser/common.ml","range":{"start":{"line":23,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Go/tests/parser/pp/printer.ml","range":{"start":{"line":9,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Go/tests/parser/pp/printer.ml","range":{"start":{"line":45,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Go/tests/parser/pp/printer.ml","range":{"start":{"line":9,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Go/tests/parser/pp/printer.ml","range":{"start":{"line":45,"column":1}}},"severity":"INFO"}
