{"message":"File 'OCamlADT/lib/values.ml' doesn't have corresponding .mli interface","location":{"path":"OCamlADT/lib/values.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OCamlADT/lib/typing.ml' doesn't have corresponding .mli interface","location":{"path":"OCamlADT/lib/typing.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OCamlADT/lib/Repl.ml' doesn't have corresponding .mli interface","location":{"path":"OCamlADT/lib/Repl.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OCamlADT/lib/printer.ml' doesn't have corresponding .mli interface","location":{"path":"OCamlADT/lib/printer.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OCamlADT/lib/parser.ml' doesn't have corresponding .mli interface","location":{"path":"OCamlADT/lib/parser.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OCamlADT/lib/interpreter.ml' doesn't have corresponding .mli interface","location":{"path":"OCamlADT/lib/interpreter.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OCamlADT/lib/infer.ml' doesn't have corresponding .mli interface","location":{"path":"OCamlADT/lib/infer.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlADT/REPL.ml","range":{"start":{"line":15,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlADT/demo/demo.ml","range":{"start":{"line":15,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlADT/demo/demo.ml","range":{"start":{"line":45,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standart tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OCamlADT/lib/values.ml","range":{"start":{"line":29,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlADT/lib/printer.ml","range":{"start":{"line":51,"column":1}}},"severity":"INFO"}
{"message":"Concatenating multiple strings at once (`a^b^c`) has a perfomance issue.\n","location":{"path":"OCamlADT/lib/printer.ml","range":{"start":{"line":56,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlADT/lib/printer.ml","range":{"start":{"line":57,"column":1}}},"severity":"INFO"}
{"message":"Concatenating multiple strings at once (`a^b^c`) has a perfomance issue.\n","location":{"path":"OCamlADT/lib/printer.ml","range":{"start":{"line":59,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlADT/lib/printer.ml","range":{"start":{"line":83,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlADT/lib/printer.ml","range":{"start":{"line":92,"column":1}}},"severity":"INFO"}
{"message":"Concatenating multiple strings at once (`a^b^c`) has a perfomance issue.\n","location":{"path":"OCamlADT/lib/printer.ml","range":{"start":{"line":99,"column":1}}},"severity":"INFO"}
{"message":"Concatenating multiple strings at once (`a^b^c`) has a perfomance issue.\n","location":{"path":"OCamlADT/lib/printer.ml","range":{"start":{"line":100,"column":1}}},"severity":"INFO"}
{"message":"Prefer guard instead of if-then-else in case construction","location":{"path":"OCamlADT/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"use_guard_instead_of_if","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"OCamlADT/lib/parser.ml","range":{"start":{"line":639,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standart tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OCamlADT/lib/interpreter.ml","range":{"start":{"line":47,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"OCamlADT/lib/interpreter.ml","range":{"start":{"line":50,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"OCamlADT/lib/interpreter.ml","range":{"start":{"line":138,"column":1}}},"severity":"INFO"}
{"message":"Rewrite record as 'eval_res'","location":{"path":"OCamlADT/lib/interpreter.ml","range":{"start":{"line":147,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlADT/lib/infer.ml","range":{"start":{"line":108,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlADT/lib/infer.ml","range":{"start":{"line":140,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlADT/lib/infer.ml","range":{"start":{"line":203,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlADT/lib/infer.ml","range":{"start":{"line":358,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCamlADT/lib/infer.ml","range":{"start":{"line":514,"column":1}}},"severity":"INFO"}
