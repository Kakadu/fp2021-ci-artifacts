{"message":"File 'Menhir/lib/lexer.ml' doesn't have corresponding .mli interface","location":{"path":"Menhir/lib/lexer.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Menhir/lib/interpret.ml' doesn't have corresponding .mli interface","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Identifier `_menhir_action_02` used somewhere else but supposed to be unused.","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":121,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `_menhir_action_03` used somewhere else but supposed to be unused.","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":129,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `_menhir_action_04` used somewhere else but supposed to be unused.","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":137,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `_menhir_action_05` used somewhere else but supposed to be unused.","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":145,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `_menhir_action_06` used somewhere else but supposed to be unused.","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":153,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `_menhir_action_07` used somewhere else but supposed to be unused.","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":161,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `_menhir_action_08` used somewhere else but supposed to be unused.","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":169,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `_menhir_action_09` used somewhere else but supposed to be unused.","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":177,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `_menhir_action_10` used somewhere else but supposed to be unused.","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":185,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `_menhir_action_11` used somewhere else but supposed to be unused.","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":193,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `_menhir_action_12` used somewhere else but supposed to be unused.","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":201,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Type name `_menhir_cell1_NONTERM` should be in snake case","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":91,"column":1}}},"severity":"INFO","code":{"value":"camel_cased_types","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Type name `_menhir_cell1_RULECOMPONENT` should be in snake case","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":98,"column":1}}},"severity":"INFO","code":{"value":"camel_cased_types","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Type name `_menhir_cell1_TOKEN` should be in snake case","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":105,"column":1}}},"severity":"INFO","code":{"value":"camel_cased_types","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Type name `_menhir_cell1_VERT` should be in snake case","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":112,"column":1}}},"severity":"INFO","code":{"value":"camel_cased_types","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `_menhir_lexer` used somewhere else but supposed to be unused.","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":438,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `_menhir_lexer` used somewhere else but supposed to be unused.","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":444,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":2,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":2,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":210,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":232,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":245,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":336,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"Menhir/lib/parser.mli","range":{"start":{"line":4,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"Menhir/lib/parser.mli","range":{"start":{"line":16,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"Menhir/_none_","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"Menhir/_none_","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"Menhir/lib/lexer.ml","range":{"start":{"line":31,"column":1}}},"severity":"INFO"}
{"message":"Using generic equality for type list and other algebraic data types is not recommended. Use pattern matching","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":79,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":84,"column":1}}},"severity":"INFO"}
{"message":"Antipattern: error swallowing","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":90,"column":1}}},"severity":"INFO"}
{"message":"Prefer guard instead of if-then-else in case construction","location":{"path":"Menhir/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"use_guard_instead_of_if","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":161,"column":1}}},"severity":"INFO"}
{"message":"Executing 'if ... then .. else true' smells bad\n","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":164,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":227,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":240,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":250,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":257,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":265,"column":1}}},"severity":"INFO"}
{"message":"Antipattern: error swallowing","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":308,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":309,"column":1}}},"severity":"INFO"}
