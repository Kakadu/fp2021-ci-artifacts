{"message":"File 'Menhir/lib/lexer.ml' doesn't have corresponding .mli interface","location":{"path":"Menhir/lib/lexer.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Menhir/lib/interpret.ml' doesn't have corresponding .mli interface","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":2,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":2,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":210,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":232,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":245,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/parser.ml","range":{"start":{"line":336,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"Menhir/lib/parser.mli","range":{"start":{"line":4,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"Menhir/lib/parser.mli","range":{"start":{"line":16,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"Menhir/_none_","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"Menhir/_none_","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using generic equality for type list and other algebraic data types is not recommended. Use pattern matching","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":79,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":84,"column":1}}},"severity":"INFO"}
{"message":"Antipattern: error swallowing","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":90,"column":1}}},"severity":"INFO"}
{"message":"Prefer guard instead of if-then-else in case construction","location":{"path":"Menhir/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"use_guard_instead_of_if","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":161,"column":1}}},"severity":"INFO"}
{"message":"Executing 'if ... then .. else true' smells bad\n","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":164,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":225,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":238,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":248,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":255,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":263,"column":1}}},"severity":"INFO"}
{"message":"Concatenating multiple strings at once (`a^b^c`) has a perfomance issue.\n","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":310,"column":1}}},"severity":"INFO"}
{"message":"Concatenating multiple strings at once (`a^b^c`) has a perfomance issue.\n","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":310,"column":1}}},"severity":"INFO"}
{"message":"Concatenating multiple strings at once (`a^b^c`) has a perfomance issue.\n","location":{"path":"Menhir/lib/interpret.ml","range":{"start":{"line":310,"column":1}}},"severity":"INFO"}
