{"message":"File 'OCaml-with-variants/lib/utils.ml' doesn't have corresponding .mli interface","location":{"path":"OCaml-with-variants/lib/utils.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OCaml-with-variants/lib/repl.ml' doesn't have corresponding .mli interface","location":{"path":"OCaml-with-variants/lib/repl.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OCaml-with-variants/lib/inter.ml' doesn't have corresponding .mli interface","location":{"path":"OCaml-with-variants/lib/inter.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OCaml-with-variants/lib/infer.ml' doesn't have corresponding .mli interface","location":{"path":"OCaml-with-variants/lib/infer.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCaml-with-variants/demos/simpleFuncs.ml","range":{"start":{"line":13,"column":1}}},"severity":"INFO"}
{"message":"Antipattern: error swallowing","location":{"path":"OCaml-with-variants/lib/utils.ml","range":{"start":{"line":67,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCaml-with-variants/lib/utils.ml","range":{"start":{"line":75,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCaml-with-variants/lib/parser.ml","range":{"start":{"line":123,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCaml-with-variants/lib/parser.ml","range":{"start":{"line":149,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCaml-with-variants/lib/inter.ml","range":{"start":{"line":100,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCaml-with-variants/lib/inter.ml","range":{"start":{"line":124,"column":1}}},"severity":"INFO"}
