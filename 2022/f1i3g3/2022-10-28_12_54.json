{"message":"File 'CSharpAsync/lib/tables.ml' doesn't have corresponding .mli interface","location":{"path":"CSharpAsync/lib/tables.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'CSharpAsync/lib/parser_tests.ml' doesn't have corresponding .mli interface","location":{"path":"CSharpAsync/lib/parser_tests.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'CSharpAsync/lib/parser.ml' doesn't have corresponding .mli interface","location":{"path":"CSharpAsync/lib/parser.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'CSharpAsync/lib/interpreter_tests.ml' doesn't have corresponding .mli interface","location":{"path":"CSharpAsync/lib/interpreter_tests.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'CSharpAsync/lib/interpreter_class.ml' doesn't have corresponding .mli interface","location":{"path":"CSharpAsync/lib/interpreter_class.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'CSharpAsync/lib/interpreter.ml' doesn't have corresponding .mli interface","location":{"path":"CSharpAsync/lib/interpreter.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'CSharpAsync/lib/csharp_lib.ml-gen' doesn't have corresponding .mli interface","location":{"path":"CSharpAsync/lib/csharp_lib.ml-gen","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Rewrite record as '{\n                     var_ctx with\n                     assignment_count = 0;\n                     is_const = (is_const modifier);\n                     var_value = (get_base_value vars_type);\n                     var_key = var_name;\n                     arr_value = newArr;\n                     var_type = tip\n                   }'","location":{"path":"CSharpAsync/lib/interpreter.ml","range":{"start":{"line":599,"column":1}}},"severity":"INFO"}
{"message":"Rewrite record as '{\n                     var_ctx with\n                     assignment_count = 0;\n                     is_const = (is_const modifier);\n                     var_value = (get_base_value vars_type);\n                     var_key = var_name;\n                     arr_value = NoArr;\n                     var_type = vars_type\n                   }'","location":{"path":"CSharpAsync/lib/interpreter.ml","range":{"start":{"line":609,"column":1}}},"severity":"INFO"}
{"message":"Rewrite record as '{\n                     expr_ctx with\n                     assignment_count = 1;\n                     is_const = (is_const modifier);\n                     var_value = (expr_ctx.last_expr_result);\n                     var_key = var_name;\n                     arr_value = NoArr;\n                     var_type = var_expr_type\n                   }'","location":{"path":"CSharpAsync/lib/interpreter.ml","range":{"start":{"line":632,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"CSharpAsync/lib/interpreter.ml","range":{"start":{"line":667,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standart tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"CSharpAsync/lib/interpreter.ml","range":{"start":{"line":685,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standart tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"CSharpAsync/lib/interpreter.ml","range":{"start":{"line":773,"column":1}}},"severity":"INFO"}
