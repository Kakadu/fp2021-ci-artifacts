{"message":"File 'NeinML/lib/typing.ml' doesn't have corresponding .mli interface","location":{"path":"NeinML/lib/typing.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'NeinML/lib/Pprintanf.ml' doesn't have corresponding .mli interface","location":{"path":"NeinML/lib/Pprintanf.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'NeinML/lib/monad.ml' doesn't have corresponding .mli interface","location":{"path":"NeinML/lib/monad.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'NeinML/lib/codegen.ml' doesn't have corresponding .mli interface","location":{"path":"NeinML/lib/codegen.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'NeinML/lib/closure.ml' doesn't have corresponding .mli interface","location":{"path":"NeinML/lib/closure.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"NeinML/lib/parser.ml","range":{"start":{"line":366,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"NeinML/lib/parser.ml","range":{"start":{"line":366,"column":1}}},"severity":"INFO"}
{"message":"Unsafe ingore. It's recommended to rewrite it as 'let (_: Llvm.llvalue) = build_store e addr builder'","location":{"path":"NeinML/lib/codegen.ml","range":{"start":{"line":47,"column":1}}},"severity":"INFO"}
{"message":"Unsafe ingore. It's recommended to rewrite it as 'let (_: Llvm.llvalue) = Llvm.build_cond_br cond_val then_bb else_bb builder'","location":{"path":"NeinML/lib/codegen.ml","range":{"start":{"line":157,"column":1}}},"severity":"INFO"}
{"message":"Unsafe ingore. It's recommended to rewrite it as 'let (_: Llvm.llvalue) = Llvm.build_br merge_bb builder'","location":{"path":"NeinML/lib/codegen.ml","range":{"start":{"line":161,"column":1}}},"severity":"INFO"}
{"message":"Unsafe ingore. It's recommended to rewrite it as 'let (_: Llvm.llvalue) = Llvm.build_br merge_bb builder'","location":{"path":"NeinML/lib/codegen.ml","range":{"start":{"line":163,"column":1}}},"severity":"INFO"}
{"message":"Unsafe ingore. It's recommended to rewrite it as 'let (_: Llvm.llvalue) = build_store codegened_body alloca builder'","location":{"path":"NeinML/lib/codegen.ml","range":{"start":{"line":174,"column":1}}},"severity":"INFO"}
{"message":"Unsafe ingore. It's recommended to rewrite it as 'let (_: Llvm.llvalue) = build_store x alloca builder'","location":{"path":"NeinML/lib/codegen.ml","range":{"start":{"line":201,"column":1}}},"severity":"INFO"}
{"message":"Unsafe ingore. It's recommended to rewrite it as 'let (_: Llvm.llvalue) = build_ret return_val builder'","location":{"path":"NeinML/lib/codegen.ml","range":{"start":{"line":217,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"NeinML/lib/closure.ml","range":{"start":{"line":152,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"NeinML/lib/closure.ml","range":{"start":{"line":152,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"NeinML/lib/closure.ml","range":{"start":{"line":191,"column":1}}},"severity":"INFO"}
{"message":"Constructor 'VarPart' has no documentation attribute","location":{"path":"NeinML/lib/ast.mli","range":{"start":{"line":12,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'statements_list' as follows:\ntype 'a statements_list = 'a statement list[@@deriving\n                                             show { with_path = false }]","location":{"path":"NeinML/lib/ast.ml","range":{"start":{"line":41,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'statements_list' as follows:\ntype 'a statements_list = 'a statement list[@@deriving\n                                             show { with_path = false }]","location":{"path":"NeinML/lib/ast.mli","range":{"start":{"line":43,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"NeinML/lib/anf.ml","range":{"start":{"line":122,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"NeinML/lib/anf.ml","range":{"start":{"line":122,"column":1}}},"severity":"INFO"}
