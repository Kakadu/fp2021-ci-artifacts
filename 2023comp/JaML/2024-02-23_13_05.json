{"message":"File 'JaML/lib/toplevel.ml' doesn't have corresponding .mli interface","location":{"path":"JaML/lib/toplevel.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'JaML/lib/Pprinttopleveltree.ml' doesn't have corresponding .mli interface","location":{"path":"JaML/lib/Pprinttopleveltree.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'JaML/lib/Pprintanf.ml' doesn't have corresponding .mli interface","location":{"path":"JaML/lib/Pprintanf.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'JaML/lib/anf.ml' doesn't have corresponding .mli interface","location":{"path":"JaML/lib/anf.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'JaML/lib/tests/parser_test.ml' doesn't have corresponding .mli interface","location":{"path":"JaML/lib/tests/parser_test.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'JaML/lib/tests/lambdalift_tests.ml' doesn't have corresponding .mli interface","location":{"path":"JaML/lib/tests/lambdalift_tests.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'JaML/lib/tests/infer_tests.ml' doesn't have corresponding .mli interface","location":{"path":"JaML/lib/tests/infer_tests.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'JaML/lib/tests/closure_tests.ml' doesn't have corresponding .mli interface","location":{"path":"JaML/lib/tests/closure_tests.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'JaML/lib/tests/anf_tests.ml' doesn't have corresponding .mli interface","location":{"path":"JaML/lib/tests/anf_tests.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"JaML/lib/Pprinttypedtree.ml","range":{"start":{"line":257,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"JaML/lib/Pprinttopleveltree.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"JaML/lib/Pprinttopleveltree.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"JaML/lib/Pprintanf.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"JaML/lib/Pprintanf.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"JaML/lib/inferencer.ml","range":{"start":{"line":334,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"JaML/lib/inferencer.ml","range":{"start":{"line":334,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"JaML/lib/anfconv.ml","range":{"start":{"line":80,"column":1}}},"severity":"INFO"}
