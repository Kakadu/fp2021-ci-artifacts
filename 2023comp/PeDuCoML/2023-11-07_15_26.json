{"message":"File 'PeDuCoML/lib/util.ml' doesn't have corresponding .mli interface","location":{"path":"PeDuCoML/lib/util.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'PeDuCoML/lib/typing.ml' doesn't have corresponding .mli interface","location":{"path":"PeDuCoML/lib/typing.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'PeDuCoML/lib/Pprintanf.ml' doesn't have corresponding .mli interface","location":{"path":"PeDuCoML/lib/Pprintanf.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'PeDuCoML/lib/parser.ml' doesn't have corresponding .mli interface","location":{"path":"PeDuCoML/lib/parser.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'PeDuCoML/lib/lambda_lift.ml' doesn't have corresponding .mli interface","location":{"path":"PeDuCoML/lib/lambda_lift.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'PeDuCoML/lib/inferencer.ml' doesn't have corresponding .mli interface","location":{"path":"PeDuCoML/lib/inferencer.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'PeDuCoML/lib/closure_conversion.ml' doesn't have corresponding .mli interface","location":{"path":"PeDuCoML/lib/closure_conversion.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'PeDuCoML/lib/anf.ml' doesn't have corresponding .mli interface","location":{"path":"PeDuCoML/lib/anf.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"PeDuCoML/lib/lambda_lift.ml","range":{"start":{"line":4,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Bad measurement of a list (with non-negative size)\nBetween 'Base.List.length pattern_list' and '0'.","location":{"path":"PeDuCoML/lib/lambda_lift.ml","range":{"start":{"line":17,"column":1}}},"severity":"INFO"}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"PeDuCoML/lib/inferencer.ml","range":{"start":{"line":4,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Bad measurement of a list (with non-negative size)\nBetween 'Base.List.length pattern_list' and '0'.","location":{"path":"PeDuCoML/lib/closure_conversion.ml","range":{"start":{"line":26,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'pattern' as follows:\ntype pattern =\n  | PLiteral of literal [@ocaml.doc \" true \"]\n  | PWildcard [@ocaml.doc \" _ \"]\n  | PTuple of pattern * pattern * pattern list [@ocaml.doc \" (1, 2) \"]\n  | PList of pattern list [@ocaml.doc \" [a; b; c] \"]\n  | PConstructList of pattern * pattern [@ocaml.doc \" a :: [b; c] \"]\n  | PIdentifier of id [@ocaml.doc \" cool_variable \"]","location":{"path":"PeDuCoML/lib/ast.ml","range":{"start":{"line":35,"column":1}}},"severity":"INFO"}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"PeDuCoML/lib/anf.ml","range":{"start":{"line":4,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'aexpr' as follows:\ntype aexpr =\n  | ALet of unique_id * cexpr * aexpr \n  | ACExpr of cexpr ","location":{"path":"PeDuCoML/lib/anf.ml","range":{"start":{"line":18,"column":1}}},"severity":"INFO"}
{"message":"Bad measurement of a list (with non-negative size)\nBetween 'Base.List.length pattern_list' and '0'.","location":{"path":"PeDuCoML/lib/anf.ml","range":{"start":{"line":153,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"PeDuCoML/lib/anf.ml","range":{"start":{"line":156,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"PeDuCoML/lib/anf.ml","range":{"start":{"line":260,"column":1}}},"severity":"INFO"}
{"message":"Bad measurement of a list (with non-negative size)\nBetween 'Base.List.length pattern_list' and '0'.","location":{"path":"PeDuCoML/lib/anf.ml","range":{"start":{"line":334,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"PeDuCoML/lib/anf.ml","range":{"start":{"line":346,"column":1}}},"severity":"INFO"}
{"message":"Bad measurement of a list (with non-negative size)\nBetween 'Base.List.length pattern_list' and '0'.","location":{"path":"PeDuCoML/lib/anf.ml","range":{"start":{"line":349,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"PeDuCoML/lib/anf.ml","range":{"start":{"line":361,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"PeDuCoML/lib/anf.ml","range":{"start":{"line":364,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"PeDuCoML/lib/anf.ml","range":{"start":{"line":368,"column":1}}},"severity":"INFO"}
