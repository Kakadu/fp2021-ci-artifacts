{"message":"Rewrite record as '{ annot with basic_blocks = bbs }'","location":{"path":"LLVM_IR/lib/parser.ml","range":{"start":{"line":726,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'func', 'basic_block', 'value', 'terminator_instruction', 'binary_operation_body', 'binary_operation', 'other_operation', 'align', 'memory_address_inst', 'instruction' as follows:\ntype func =\n  {\n  parameters: variable list ;\n  basic_blocks: (variable * const) list }[@@deriving\n                                           show { with_path = false }]\ntype basic_block = instruction list[@@deriving show { with_path = false }]\ntype value =\n  | FromVariable of variable * tp \n  | Const of const [@@deriving show { with_path = false }]\ntype terminator_instruction =\n  | Ret of tp * value [@ocaml.doc \" ret <type> <value> \"]\n  | Br of value [@ocaml.doc \" br label <dest> \"]\n  | BrCond of value * value * value\n  [@ocaml.doc \" br i1 <cond>, label <iftrue>, label <iffalse> \"][@@deriving\n                                                                  show\n                                                                    {\n                                                                    with_path\n                                                                    = false\n                                                                    }]\ntype binary_operation_body = (variable * tp * value * value)[@@deriving\n                                                              show\n                                                                {\n                                                                  with_path =\n                                                                    false\n                                                                }]\ntype binary_operation =\n  | Mul of binary_operation_body \n  | Sub of binary_operation_body [@@deriving show { with_path = false }]\ntype other_operation =\n  | Icmp of variable * string * tp * value * value\n  [@ocaml.doc \" <result> = icmp <cond> <ty> <op1>, <op2> \"]\n  | Call of variable * tp * value * value list\n  [@ocaml.doc \" <result> = call <ty> <fnptrval>(<function args>) \"]\ntype align = int\ntype memory_address_inst =\n  | Alloca of variable * tp * value * align\n  [@ocaml.doc\n    \" <result> = alloca <type> [, <ty> <NumElements>] [, align <alignment>] \"]\n  | Store of tp * value * value * align\n  [@ocaml.doc \" store <ty> <value>, ptr <pointer>[, align <alignment>] \"]\n  | Load of variable * tp * value * align\n  [@ocaml.doc \" <result> = load <ty>, ptr <pointer>[, align <alignment>]\"]\ntype instruction =\n  | Terminator of terminator_instruction \n  | Binary of binary_operation \n  | Other of other_operation \n  | MemoryAddress of memory_address_inst [@@deriving\n                                           show { with_path = true }]","location":{"path":"LLVM_IR/lib/ast.ml","range":{"start":{"line":35,"column":1}}},"severity":"INFO"}
