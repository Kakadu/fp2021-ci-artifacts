{"message":"File 'FSharpUnitsOfMeasure/lib/parser.ml' doesn't have corresponding .mli interface","location":{"path":"FSharpUnitsOfMeasure/lib/parser.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'FSharpUnitsOfMeasure/lib/interpreter.ml' doesn't have corresponding .mli interface","location":{"path":"FSharpUnitsOfMeasure/lib/interpreter.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'FSharpUnitsOfMeasure/lib/interpret_error.ml' doesn't have corresponding .mli interface","location":{"path":"FSharpUnitsOfMeasure/lib/interpret_error.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'FSharpUnitsOfMeasure/lib/tests/parser_tests.ml' doesn't have corresponding .mli interface","location":{"path":"FSharpUnitsOfMeasure/lib/tests/parser_tests.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'FSharpUnitsOfMeasure/lib/tests/interpreter_tests.ml' doesn't have corresponding .mli interface","location":{"path":"FSharpUnitsOfMeasure/lib/tests/interpreter_tests.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Using nested if expressions more than three layers deep is a bad practice. Use let statements or helper methods or rethinking logic.","location":{"path":"FSharpUnitsOfMeasure/lib/parser.ml","range":{"start":{"line":72,"column":1}}},"severity":"INFO"}
{"message":"Executing 'if ... then true' smells bad\n","location":{"path":"FSharpUnitsOfMeasure/lib/interpreter.ml","range":{"start":{"line":111,"column":1}}},"severity":"INFO"}
{"message":"Prefer guard instead of if-then-else in case construction","location":{"path":"FSharpUnitsOfMeasure/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"use_guard_instead_of_if","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Executing 'if ... then true' smells bad\n","location":{"path":"FSharpUnitsOfMeasure/lib/interpreter.ml","range":{"start":{"line":157,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'binary_op' as follows:\ntype binary_op =\n  | Add [@ocaml.doc \" + \"]\n  | Sub [@ocaml.doc \" - \"]\n  | Mul [@ocaml.doc \" * \"]\n  | Div [@ocaml.doc \" / \"]\n  | Mod [@ocaml.doc \" % \"]\n  | And [@ocaml.doc \" && \"]\n  | Or [@ocaml.doc \" || \"]\n  | Eq [@ocaml.doc \" = \"]\n  | Neq [@ocaml.doc \" <> \"]\n  | Less \n  | Gre [@ocaml.doc \" > \"]\n  | Leq [@ocaml.doc \" <= \"]\n  | Greq [@ocaml.doc \" >= \"][@@deriving show { with_path = false }]","location":{"path":"FSharpUnitsOfMeasure/lib/ast.ml","range":{"start":{"line":9,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"FSharpUnitsOfMeasure/lib/tests/interpreter_tests.ml","range":{"start":{"line":3,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"FSharpUnitsOfMeasure/lib/tests/interpreter_tests.ml","range":{"start":{"line":5,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
