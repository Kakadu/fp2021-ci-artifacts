{"message":"File 'Javascript/lib/tests.ml' doesn't have corresponding .mli interface","location":{"path":"Javascript/lib/tests.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Extranous `@@`.","location":{"path":"Javascript/lib/parser.ml","range":{"start":{"line":236,"column":1}}},"severity":"INFO","code":{"value":"camel_extra_dollar","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Prefer guard instead of if-then-else in case construction","location":{"path":"Javascript/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"use_guard_instead_of_if","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"Javascript/lib/parser.ml","range":{"start":{"line":172,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'fun_init', 'statement' as follows:\ntype fun_init =\n  {\n  fun_identifier: string ;\n  arguments: expression list ;\n  body: statement option }\ntype statement =\n  | Block of statement list \n  | Expression of expression \n  | VarDeck of var_init \n  | FunDeck of fun_init \n  | If of expression * statement * statement option \n  | Return of expression \n  | EmptyStm \n  | Programm of statement list [@@deriving\n                                 (eq, (show { with_path = false }))]","location":{"path":"Javascript/lib/ast.ml","range":{"start":{"line":28,"column":1}}},"severity":"INFO"}
{"message":"Executing 'if ... then true' smells bad\n","location":{"path":"Javascript/lib/tests.ml","range":{"start":{"line":10,"column":1}}},"severity":"INFO"}
