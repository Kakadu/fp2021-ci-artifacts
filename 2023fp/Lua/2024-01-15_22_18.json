{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Lua/lib/interpreter/interpreter.ml","range":{"start":{"line":16,"column":1}}},"severity":"INFO"}
{"message":"Unsafe ingore. It's recommended to rewrite it as 'let (_: float) = float_of_string x'","location":{"path":"Lua/lib/interpreter/interpreter.ml","range":{"start":{"line":50,"column":1}}},"severity":"INFO"}
{"message":"Using `let ... in` is recommended","location":{"path":"Lua/lib/interpreter/interpreter.ml","range":{"start":{"line":142,"column":1}}},"severity":"INFO"}
{"message":"Using `let ... in` is recommended","location":{"path":"Lua/lib/interpreter/interpreter.ml","range":{"start":{"line":198,"column":1}}},"severity":"INFO"}
{"message":"Using `let ... in` is recommended","location":{"path":"Lua/lib/interpreter/interpreter.ml","range":{"start":{"line":219,"column":1}}},"severity":"INFO"}
{"message":"Using `let ... in` is recommended","location":{"path":"Lua/lib/interpreter/interpreter.ml","range":{"start":{"line":224,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'ident', 'op_id', 'local_flag' as follows:\ntype ident = string[@@deriving show { with_path = false }]\ntype op_id =\n  | Op_add [@ocaml.doc \" E1 + E2 \"]\n  | Op_mul [@ocaml.doc \" E1 * E2 \"]\n  | Op_div [@ocaml.doc \" E1 / E2 \"]\n  | Op_sub [@ocaml.doc \" E1 - E2 \"]\n  | Op_mod [@ocaml.doc \" E1 % E2 \"]\n  | Op_concat [@ocaml.doc \" E1 .. E2 \"]\n  | Op_eq [@ocaml.doc \" E1 == E2 \"]\n  | Op_neq [@ocaml.doc \" E1 ~= E2 \"]\n  | Op_lt [@ocaml.doc \" E1 < E2 \"]\n  | Op_le [@ocaml.doc \" E1 <= E2 \"]\n  | Op_and [@ocaml.doc \" E1 and E2 \"]\n  | Op_or [@ocaml.doc \" E1 or E2 \"][@@deriving show { with_path = false }]\ntype local_flag =\n  | Local \n  | Nonlocal [@@deriving show { with_path = false }]","location":{"path":"Lua/lib/ast/ast.ml","range":{"start":{"line":5,"column":1}}},"severity":"INFO"}
