{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"Haskell/lib/typedtree.mli","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"Haskell/lib/typedtree.mli","range":{"start":{"line":3,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":211,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'err' as follows:\ntype err =\n  | NotInScopeError of string \n  | DivisionByZeroError \n  | NonExhaustivePatterns of string \n  | TypeMismatch ","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":51,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":109,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":124,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":139,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":146,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":147,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":150,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":161,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":162,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":163,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":170,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":181,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":184,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":188,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":189,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":192,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":195,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":196,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":199,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":205,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":208,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":209,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":211,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":215,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":262,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":268,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":269,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":271,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":272,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":308,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":315,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"Haskell/lib/interpreter.ml","range":{"start":{"line":320,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'err' as follows:\ntype err =\n  | NotInScopeError of string \n  | DivisionByZeroError \n  | NonExhaustivePatterns of string \n  | TypeMismatch ","location":{"path":"Haskell/lib/interpreter.mli","range":{"start":{"line":23,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'err' as follows:\ntype err =\n  | NotInScopeError of string \n  | DivisionByZeroError \n  | NonExhaustivePatterns of string \n  | TypeMismatch ","location":{"path":"Haskell/lib/interpreter.mli","range":{"start":{"line":44,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Haskell/lib/inferencer.ml","range":{"start":{"line":516,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Haskell/lib/inferencer.ml","range":{"start":{"line":516,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'lit', 'pat', 'decl', 'prog' as follows:\ntype lit =\n  | LitInt of int [@ocaml.doc \" Integer literal [7] \"]\n  | LitBool of bool [@ocaml.doc \" Boolean literal [True] \"]\n  | LitChar of char [@ocaml.doc \" Character literal ['a'] \"]\n  | LitString of string [@ocaml.doc \" String literal [\\\"abc\\\"] \"][@@ocaml.doc\n                                                                   \" Type representing literals \"]\n[@@deriving show { with_path = false }]\ntype pat =\n  | PatWild [@ocaml.doc \" Wildcard pattern [_] \"]\n  | PatVar of id [@ocaml.doc \" Variable pattern [x] \"]\n  | PatLit of lit [@ocaml.doc \" Literal pattern [1], ['a'], [\\\"abc\\\"] \"]\n  | PatTuple of pat list [@ocaml.doc \" Tuple pattern [(x, y)] \"]\n  | PatCons of pat * pat [@ocaml.doc \" List constructor pattern [x:xs] \"]\n  | PatNil [@ocaml.doc \" Empty list pattern [[]] \"][@@ocaml.doc\n                                                     \" Type representing possible patterns in pattern-matching. \"]\n[@@deriving show { with_path = false }]\ntype decl =\n  | DeclLet of binding [@ocaml.doc \" Let binding declaration [x = 5] \"]\n[@@ocaml.doc \" Type representing a single declaration. \"][@@deriving\n                                                           show\n                                                             {\n                                                               with_path =\n                                                                 false\n                                                             }]\ntype prog = decl list[@@ocaml.doc\n                       \" Type representing a whole program as a series of declarations. \"]\n[@@deriving show { with_path = false }]","location":{"path":"Haskell/lib/ast.ml","range":{"start":{"line":31,"column":1}}},"severity":"INFO"}
