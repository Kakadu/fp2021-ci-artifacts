{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"Python/lib/parser.ml","range":{"start":{"line":41,"column":1}}},"severity":"INFO"}
{"message":"Constructor 'FStringElem' has no documentation attribute","location":{"path":"Python/lib/ast.mli","range":{"start":{"line":63,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'No' has no documentation attribute","location":{"path":"Python/lib/ast.mli","range":{"start":{"line":107,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Return_f' has no documentation attribute","location":{"path":"Python/lib/ast.mli","range":{"start":{"line":108,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'expression' as follows:\ntype expression =\n  | Const of value [@ocaml.doc \" A constant that holds value \"]\n  | Variable of modifier * identifier\n  [@ocaml.doc \" Variable with a scope and its identifier \"]\n  | ArithOp of arith_op * expression * expression\n  [@ocaml.doc\n    \" Arithmetic operation that consists of an operator and operands \"]\n  | BoolOp of bool_op * expression * expression\n  [@ocaml.doc\n    \" Logical operation that consists of an operator and operands \"]\n  | FunctionCall of identifier * expression list\n  [@ocaml.doc \" A function call with its arguments \"]\n  | List of expression list [@ocaml.doc \" A list expression \"]\n  | Field of identifier * identifier [@ocaml.doc \" A class field x.field \"]\n  | MethodCall of identifier * identifier * expression list\n  [@ocaml.doc \" A method call class.method() \"]\n  | Lambda of identifier list * expression\n  [@ocaml.doc \" Anonymous function \"]\n  | Object of identifier * expression list\n  [@ocaml.doc \" Instance of a class \"]\n  | FString of f_string_elem list [@ocaml.doc \" F string \"][@@deriving\n                                                             (eq,\n                                                               (show\n                                                                  {\n                                                                    with_path\n                                                                    = false\n                                                                  }))]","location":{"path":"Python/lib/ast.ml","range":{"start":{"line":49,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'expression' as follows:\ntype expression =\n  | Const of value [@ocaml.doc \" A constant that holds value \"]\n  | Variable of modifier * identifier\n  [@ocaml.doc \" Variable with a scope and its identifier \"]\n  | ArithOp of arith_op * expression * expression\n  [@ocaml.doc\n    \" Arithmetic operation that consists of an operator and operands \"]\n  | BoolOp of bool_op * expression * expression\n  [@ocaml.doc\n    \" Logical operation that consists of an operator and operands \"]\n  | FunctionCall of identifier * expression list\n  [@ocaml.doc \" A function call with its arguments \"]\n  | List of expression list [@ocaml.doc \" A list expression \"]\n  | Field of identifier * identifier [@ocaml.doc \" A class field x.field \"]\n  | MethodCall of identifier * identifier * expression list\n  [@ocaml.doc \" A method call class.method() \"]\n  | Lambda of identifier list * expression\n  [@ocaml.doc \" Anonymous function \"]\n  | Object of identifier * expression list\n  [@ocaml.doc \" Instance of a class \"]\n  | FString of f_string_elem list [@ocaml.doc \" F string \"]","location":{"path":"Python/lib/ast.mli","range":{"start":{"line":63,"column":1}}},"severity":"INFO"}
