{"message":"File 'OCaml_ExtensibleVariantTypes/lib/parser.ml' doesn't have corresponding .mli interface","location":{"path":"OCaml_ExtensibleVariantTypes/lib/parser.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'OCaml_ExtensibleVariantTypes/lib/tests.ml' doesn't have corresponding .mli interface","location":{"path":"OCaml_ExtensibleVariantTypes/lib/tests.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Extranous `@@`.","location":{"path":"OCaml_ExtensibleVariantTypes/lib/parser.ml","range":{"start":{"line":159,"column":1}}},"severity":"INFO","code":{"value":"camel_extra_dollar","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Extranous `@@`.","location":{"path":"OCaml_ExtensibleVariantTypes/lib/parser.ml","range":{"start":{"line":167,"column":1}}},"severity":"INFO","code":{"value":"camel_extra_dollar","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Extranous `@@`.","location":{"path":"OCaml_ExtensibleVariantTypes/lib/parser.ml","range":{"start":{"line":202,"column":1}}},"severity":"INFO","code":{"value":"camel_extra_dollar","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCaml_ExtensibleVariantTypes/lib/parser.ml","range":{"start":{"line":321,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OCaml_ExtensibleVariantTypes/lib/parser.ml","range":{"start":{"line":322,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'unary_op' as follows:\ntype unary_op =\n  | Plus \n  | Minus \n  | Not [@@deriving show { with_path = false }]","location":{"path":"OCaml_ExtensibleVariantTypes/lib/ast.ml","range":{"start":{"line":12,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'rec_flag', 'bind', 'decl' as follows:\ntype rec_flag =\n  | Recursive \n  | Not_recursive [@@deriving (eq, (show { with_path = false }))]\ntype bind =\n  | DLet of rec_flag * ident * expr [@@deriving\n                                      (eq, (show { with_path = false }))]\ntype decl = (bind * expr)[@@deriving (eq, (show { with_path = false }))]","location":{"path":"OCaml_ExtensibleVariantTypes/lib/ast.ml","range":{"start":{"line":38,"column":1}}},"severity":"INFO"}
