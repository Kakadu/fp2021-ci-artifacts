{"message":"File 'Ocaml+ADT/lib/parser.ml' doesn't have corresponding .mli interface","location":{"path":"Ocaml+ADT/lib/parser.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Ocaml+ADT/lib/interpreterTypes.ml' doesn't have corresponding .mli interface","location":{"path":"Ocaml+ADT/lib/interpreterTypes.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Ocaml+ADT/lib/interpreterResultPrinter.ml' doesn't have corresponding .mli interface","location":{"path":"Ocaml+ADT/lib/interpreterResultPrinter.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Ocaml+ADT/lib/interpreter.ml' doesn't have corresponding .mli interface","location":{"path":"Ocaml+ADT/lib/interpreter.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Ocaml+ADT/lib/inferencerTypes.ml' doesn't have corresponding .mli interface","location":{"path":"Ocaml+ADT/lib/inferencerTypes.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Ocaml+ADT/lib/inferencer.ml' doesn't have corresponding .mli interface","location":{"path":"Ocaml+ADT/lib/inferencer.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Ocaml+ADT/lib/tests/parserTests.ml' doesn't have corresponding .mli interface","location":{"path":"Ocaml+ADT/lib/tests/parserTests.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Ocaml+ADT/lib/tests/interpreterTests.ml' doesn't have corresponding .mli interface","location":{"path":"Ocaml+ADT/lib/tests/interpreterTests.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Ocaml+ADT/lib/tests/inferencerTests.ml' doesn't have corresponding .mli interface","location":{"path":"Ocaml+ADT/lib/tests/inferencerTests.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Prefer guard instead of if-then-else in case construction","location":{"path":"Ocaml+ADT/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"use_guard_instead_of_if","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"Ocaml+ADT/lib/inferencer.ml","range":{"start":{"line":555,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"Ocaml+ADT/lib/inferencer.ml","range":{"start":{"line":555,"column":1}}},"severity":"INFO"}
