{"message":"File 'Go/lib/parser.ml' doesn't have corresponding .mli interface","location":{"path":"Go/lib/parser.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Go/lib/monades.ml' doesn't have corresponding .mli interface","location":{"path":"Go/lib/monades.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Go/lib/binder.ml' doesn't have corresponding .mli interface","location":{"path":"Go/lib/binder.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Consider using `List.fold_right` instead of `combine'`","location":{"path":"Go/lib/parser.ml","range":{"start":{"line":294,"column":1}}},"severity":"INFO"}
{"message":"","location":{"path":"Go/lib/parser.ml","range":{"start":{"line":227,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"Go/lib/monades.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"Go/lib/monades.ml","range":{"start":{"line":3,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"Go/lib/binder.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"Go/lib/binder.ml","range":{"start":{"line":4,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Type name `typeB'` should be in snake case","location":{"path":"Go/lib/binded_ast.ml","range":{"start":{"line":6,"column":1}}},"severity":"INFO","code":{"value":"camel_cased_types","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Type name `identifierB` should be in snake case","location":{"path":"Go/lib/binded_ast.ml","range":{"start":{"line":66,"column":1}}},"severity":"INFO","code":{"value":"camel_cased_types","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"Go/lib/binded_ast.ml","range":{"start":{"line":4,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'arg', 'signature', 'ret_typ' as follows:\ntype arg = (int * string * type')[@@deriving show { with_path = false }]\n[@@ocaml.doc\n  \" @ocaml.doc \\\"Here it is indicated what kind of function argument they have. It consists of a pair of string(argument name) - type of argument.\\\" \"]\ntype signature = {\n  argsB: arg list ;\n  retB: Ast.ret_typ }[@@ocaml.text\n                       \" @ocaml.doc \\\"Here are the data types that are used in the Golang language.\\\" \"]\n[@@deriving show { with_path = false }][@@ocaml.doc\n                                         \" @ocaml.doc \\\"The structure of the function signature is indicated here. args is the list of arguments that the function accepts, ret is the return type of the function.\\\" \"]\ntype ret_typ =\n  | Type of typeB' \n  | VoidB [@@deriving show { with_path = false }][@@ocaml.doc\n                                                   \" @ocaml.doc \\\"It specifies which types the function's return values can have. They can be one of the type' elements, or the function can return nothing and have the Void type.\\\" \"]","location":{"path":"Go/lib/binded_ast.ml","range":{"start":{"line":6,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'identifierB', 'func_declaration', 'global_func_declaration', 'global_var_declaration' as follows:\ntype identifierB = identifier[@@ocaml.doc\n                               \" @ocaml.doc \\\"All types of expressions provided by this Golang language interpreter are listed here.\\n    Lan Call is a constructor of a predefined len function that accepts only a string constant as input.\\\" \"]\n[@@ocaml.doc\n  \" @ocaml.doc \\\"All types of identifiers provided by this Golang language interpreter are listed here.\\\" \"]\ntype func_declaration = (int * string * signature * block)[@@ocaml.doc\n                                                            \" @ocaml.doc \\\"Here is a constructor that represents the structure of the function definition.\\\" \"]\ntype global_func_declaration =\n  | FuncTopLevelDeclarationB of func_declaration [@@deriving\n                                                   show { with_path = false }]\n[@@ocaml.doc\n  \" @ocaml.doc \\\"Here is a type that represents the constructor of the global function definition.\\\" \"]\ntype global_var_declaration =\n  | VarTopLevelDeclarationB of var_declaration [@@deriving\n                                                 show { with_path = false }]\n[@@ocaml.doc\n  \" @ocaml.doc \\\"Here is a type that represents the constructor of the global variable definition.\\\" \"]","location":{"path":"Go/lib/binded_ast.ml","range":{"start":{"line":54,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'identifier', 'func_declaration', 'global_declaration' as follows:\ntype identifier =\n  | Integer of int \n  | String of string \n  | Bool of bool \n  | Nil\n  [@ocaml.doc\n    \" @ocaml.doc \\\"All types of identifiers provided by this Golang language interpreter are listed here.\\\" \"]\n[@@ocaml.doc\n  \" @ocaml.doc \\\"All types of expressions provided by this Golang language interpreter are listed here.\\n    Lan Call is a constructor of a predefined len function that accepts only a string constant as input.\\\" \"]\ntype func_declaration = (string * signature * block)[@@ocaml.doc\n                                                      \" @ocaml.doc \\\"Here is a constructor that represents the structure of the function definition.\\\" \"]\ntype global_declaration =\n  | VarTopLevelDeclaration of var_declaration \n  | FuncTopLevelDeclaration of func_declaration [@@deriving\n                                                  show { with_path = false }]\n[@@ocaml.doc\n  \" @ocaml.doc \\\"Here is a type that represents the constructor of the global definition.\\\" \"]","location":{"path":"Go/lib/ast.ml","range":{"start":{"line":56,"column":1}}},"severity":"INFO"}
