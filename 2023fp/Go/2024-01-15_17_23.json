{"message":"File 'Go/lib/parser.ml' doesn't have corresponding .mli interface","location":{"path":"Go/lib/parser.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Go/lib/monades.ml' doesn't have corresponding .mli interface","location":{"path":"Go/lib/monades.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"File 'Go/lib/binder.ml' doesn't have corresponding .mli interface","location":{"path":"Go/lib/binder.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Consider using `List.fold_right` instead of `combine'`","location":{"path":"Go/lib/parser.ml","range":{"start":{"line":294,"column":1}}},"severity":"INFO"}
{"message":"","location":{"path":"Go/lib/parser.ml","range":{"start":{"line":227,"column":1}}},"severity":"INFO"}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"Go/lib/monades.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"Go/lib/monades.ml","range":{"start":{"line":3,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":" First item in file should be a documentation comment with copyright information. For example:\n            (** Copyright 2021-2022, Winnie Pooh et al. *)","location":{"path":"Go/lib/binder.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"Go/lib/binder.ml","range":{"start":{"line":4,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Type name `typeB'` should be in snake case","location":{"path":"Go/lib/binded_ast.ml","range":{"start":{"line":6,"column":1}}},"severity":"INFO","code":{"value":"camel_cased_types","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Type name `identifierB` should be in snake case","location":{"path":"Go/lib/binded_ast.ml","range":{"start":{"line":52,"column":1}}},"severity":"INFO","code":{"value":"camel_cased_types","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Second item in file should be a documentation comment with correct license information. For example:\n           (** SPDX-License-Identifier: LGPL-3.0-or-later *)","location":{"path":"Go/lib/binded_ast.ml","range":{"start":{"line":4,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'arg', 'signature', 'ret_typ' as follows:\ntype arg = (int * string * type')[@@deriving show { with_path = false }]\ntype signature = {\n  argsB: arg list ;\n  retB: Ast.ret_typ }[@@deriving show { with_path = false }]\ntype ret_typ =\n  | Type of typeB' \n  | VoidB [@@deriving show { with_path = false }]","location":{"path":"Go/lib/binded_ast.ml","range":{"start":{"line":6,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'identifierB', 'func_declaration', 'global_func_declaration', 'global_var_declaration' as follows:\ntype identifierB = identifier\ntype func_declaration = (int * string * signature * block)\ntype global_func_declaration =\n  | FuncTopLevelDeclarationB of func_declaration [@@deriving\n                                                   show { with_path = false }]\ntype global_var_declaration =\n  | VarTopLevelDeclarationB of var_declaration [@@deriving\n                                                 show { with_path = false }]","location":{"path":"Go/lib/binded_ast.ml","range":{"start":{"line":41,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'identifier', 'func_declaration', 'global_declaration' as follows:\ntype identifier =\n  | Integer of int \n  | String of string \n  | Bool of bool \n  | Nil \ntype func_declaration = (string * signature * block)\ntype global_declaration =\n  | VarTopLevelDeclaration of var_declaration \n  | FuncTopLevelDeclaration of func_declaration [@@deriving\n                                                  show { with_path = false }]","location":{"path":"Go/lib/ast.ml","range":{"start":{"line":45,"column":1}}},"severity":"INFO"}
