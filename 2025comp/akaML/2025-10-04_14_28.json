{"message":"Identifier `__0` used somewhere else but supposed to be unused.","location":{"path":"akaML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"akaML/bin/akaML.ml","range":{"start":{"line":8,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"akaML/bin/akaML.ml","range":{"start":{"line":9,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"akaML/bin/akaML.ml","range":{"start":{"line":10,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"akaML/bin/akaML.ml","range":{"start":{"line":11,"column":1}}},"severity":"INFO"}
{"message":"Unsafe ingore. It's recommended to rewrite it as 'let (_: Inferencer.TypeEnv.t) = run text env_infer oc'","location":{"path":"akaML/bin/akaML.ml","range":{"start":{"line":61,"column":1}}},"severity":"INFO"}
{"message":"Unsafe ingore. It's recommended to rewrite it as 'let (_: Inferencer.TypeEnv.t) = run text env_infer Out_channel.stdout'","location":{"path":"akaML/bin/akaML.ml","range":{"start":{"line":62,"column":1}}},"severity":"INFO"}
{"message":"Unsafe ingore. It's recommended to rewrite it as 'let (_: Inferencer.TypeEnv.t) = run input env_infer oc'","location":{"path":"akaML/bin/akaML.ml","range":{"start":{"line":67,"column":1}}},"severity":"INFO"}
{"message":"Unsafe ingore. It's recommended to rewrite it as 'let (_: Inferencer.TypeEnv.t) = run input env_infer Out_channel.stdout'","location":{"path":"akaML/bin/akaML.ml","range":{"start":{"line":68,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun opr -> exp_ident opr' as \n'exp_ident'","location":{"path":"akaML/lib/ast/ast.ml","range":{"start":{"line":182,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun opr -> exp_ident opr' as \n'exp_ident'","location":{"path":"akaML/lib/ast/ast.ml","range":{"start":{"line":186,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"akaML/lib/ricsv/codegen.ml","range":{"start":{"line":109,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"akaML/lib/ricsv/codegen.ml","range":{"start":{"line":166,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"akaML/lib/ricsv/codegen.ml","range":{"start":{"line":207,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"akaML/lib/ricsv/codegen.ml","range":{"start":{"line":241,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"akaML/lib/ricsv/codegen.ml","range":{"start":{"line":247,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"akaML/lib/ricsv/codegen.ml","range":{"start":{"line":253,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"akaML/lib/ricsv/codegen.ml","range":{"start":{"line":301,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"akaML/lib/ricsv/codegen.ml","range":{"start":{"line":308,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"akaML/lib/ricsv/codegen.ml","range":{"start":{"line":328,"column":1}}},"severity":"INFO"}
