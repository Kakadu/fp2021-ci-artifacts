{"message":"File 'PudgeWithMoML/test/parser.ml' doesn't have corresponding .mli interface","location":{"path":"PudgeWithMoML/test/parser.ml","range":{"start":{"line":1,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"PudgeWithMoML/bin/compiler.ml","range":{"start":{"line":10,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"PudgeWithMoML/bin/compiler.ml","range":{"start":{"line":11,"column":1}}},"severity":"INFO"}
{"message":"Unneeded mutual recursion detected in these type declarations. It's recommended to rewrite 'expr', 'binding', 'case' as follows:\ntype expr =\n  | Const of literal \n  | Tuple of expr * expr * expr list \n  | List of expr list \n  | Variable of ident \n  | If_then_else of expr * expr * expr option \n  | Lambda of pattern * expr \n  | Apply of expr * expr \n  | Function of case * case list\n  [@ocaml.doc \" [function | p1 -> e1 | p2 -> e2 | ... |]\"]\n  | Match of expr * case * case list\n  [@ocaml.doc \" [match x with | p1 -> e1 | p2 -> e2 | ...] \"]\n  | Option of expr option \n  | EConstraint of expr * typ \n  | LetIn of is_recursive * binding list * expr [@@deriving\n                                                  show { with_path = false }]\nand binding = (pattern * expr)[@@deriving show { with_path = false }]\nand case = (pattern * expr)[@@deriving show { with_path = false }]","location":{"path":"PudgeWithMoML/lib/frontend/ast.ml","range":{"start":{"line":26,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"PudgeWithMoML/lib/frontend/parser.ml","range":{"start":{"line":24,"column":1}}},"severity":"INFO"}
{"message":"Identifier `__0` used somewhere else but supposed to be unused.","location":{"path":"PudgeWithMoML/lib/riscv/codegen.ml","range":{"start":{"line":8,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `function` is recommended","location":{"path":"PudgeWithMoML/lib/riscv/codegen.ml","range":{"start":{"line":76,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"PudgeWithMoML/lib/riscv/codegen.ml","range":{"start":{"line":87,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"PudgeWithMoML/lib/riscv/codegen.ml","range":{"start":{"line":109,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"PudgeWithMoML/lib/riscv/codegen.ml","range":{"start":{"line":120,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"PudgeWithMoML/lib/riscv/codegen.ml","range":{"start":{"line":123,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"PudgeWithMoML/lib/riscv/codegen.ml","range":{"start":{"line":141,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"PudgeWithMoML/lib/riscv/codegen.ml","range":{"start":{"line":144,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"PudgeWithMoML/lib/riscv/machine.ml","range":{"start":{"line":24,"column":1}}},"severity":"INFO"}
