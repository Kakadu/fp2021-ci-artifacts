{"message":"Identifier `__0` used somewhere else but supposed to be unused.","location":{"path":"AML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `__0` used somewhere else but supposed to be unused.","location":{"path":"AML/lib/ast/ast.ml","range":{"start":{"line":140,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `__0` used somewhere else but supposed to be unused.","location":{"path":"AML/lib/ast/ast.ml","range":{"start":{"line":150,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":74,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":147,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":159,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":170,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":197,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun i ->\n                                                       fun env ->\n                                                         fun p -> f i env p' as \n'f'","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":200,"column":1}}},"severity":"INFO"}
{"message":"Rewrite record as '{ state with frame_offset = 16; env = initial_env }'","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":203,"column":1}}},"severity":"INFO"}
{"message":"Using `let ... in` is recommended","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":205,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":225,"column":1}}},"severity":"INFO"}
{"message":"Identifier `__0` used somewhere else but supposed to be unused.","location":{"path":"AML/lib/codegen/machine.ml","range":{"start":{"line":12,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `__0` used somewhere else but supposed to be unused.","location":{"path":"AML/lib/middleend/anf.ml","range":{"start":{"line":11,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun x ->\n                                                       fun f -> bind x f' as \n'bind'","location":{"path":"AML/lib/middleend/anf.ml","range":{"start":{"line":57,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"AML/lib/middleend/anf.ml","range":{"start":{"line":100,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"AML/lib/middleend/anf.ml","range":{"start":{"line":105,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"AML/lib/middleend/anf.ml","range":{"start":{"line":167,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"AML/lib/middleend/anf.ml","range":{"start":{"line":177,"column":1}}},"severity":"INFO"}
