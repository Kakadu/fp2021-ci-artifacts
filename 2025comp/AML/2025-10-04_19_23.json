{"message":"Identifier `__0` used somewhere else but supposed to be unused.","location":{"path":"AML/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `__0` used somewhere else but supposed to be unused.","location":{"path":"AML/lib/ast/ast.ml","range":{"start":{"line":140,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Identifier `__0` used somewhere else but supposed to be unused.","location":{"path":"AML/lib/ast/ast.ml","range":{"start":{"line":150,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":65,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":76,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":120,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":136,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":160,"column":1}}},"severity":"INFO"}
{"message":"Using `let ... in` is recommended","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":164,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"AML/lib/codegen/codegen.ml","range":{"start":{"line":184,"column":1}}},"severity":"INFO"}
{"message":"Identifier `__0` used somewhere else but supposed to be unused.","location":{"path":"AML/lib/codegen/machine.ml","range":{"start":{"line":12,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun acc ->\n                                                       fun h -> helper acc h' as \n'helper'","location":{"path":"AML/lib/infer/infer.ml","range":{"start":{"line":84,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun acc ->\n                                                       fun h -> helper acc h' as \n'helper'","location":{"path":"AML/lib/infer/infer.ml","range":{"start":{"line":85,"column":1}}},"severity":"INFO"}
{"message":"Eta reduction proposed. It's recommended to rewrite 'fun sub ->\n                                                       fun k ->\n                                                         Base.Map.remove sub\n                                                           k' as 'Base.Map.remove'","location":{"path":"AML/lib/infer/infer.ml","range":{"start":{"line":230,"column":1}}},"severity":"INFO"}
{"message":"Using `function` is recommended","location":{"path":"AML/lib/infer/infer.ml","range":{"start":{"line":367,"column":1}}},"severity":"INFO"}
