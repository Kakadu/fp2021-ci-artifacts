{"message":"Identifier `__0` used somewhere else but supposed to be unused.","location":{"path":"OMLet/_none_","range":{"start":{"line":0,"column":1}}},"severity":"INFO","code":{"value":"var_should_not_be_used","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OMLet/bin/LL.ml","range":{"start":{"line":67,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OMLet/lib/anf.ml","range":{"start":{"line":43,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OMLet/lib/anf.ml","range":{"start":{"line":43,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OMLet/lib/anf.ml","range":{"start":{"line":44,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OMLet/lib/anf.ml","range":{"start":{"line":58,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OMLet/lib/anf.ml","range":{"start":{"line":91,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OMLet/lib/anf.ml","range":{"start":{"line":101,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OMLet/lib/anf.ml","range":{"start":{"line":118,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OMLet/lib/anf.ml","range":{"start":{"line":131,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OMLet/lib/anf.ml","range":{"start":{"line":140,"column":1}}},"severity":"INFO"}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OMLet/lib/anf.mli","range":{"start":{"line":4,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OMLet/lib/anf.mli","range":{"start":{"line":39,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OMLet/lib/anfPrettyPrinter.ml","range":{"start":{"line":42,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OMLet/lib/anfPrettyPrinter.ml","range":{"start":{"line":44,"column":1}}},"severity":"INFO"}
{"message":"Constructor 'Ident' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":5,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Int_lt' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":11,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Bool_lt' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":12,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'String_lt' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":13,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Unit_lt' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":14,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Binary_equal' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":19,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Binary_unequal' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":20,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Binary_less' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":21,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Binary_less_or_equal' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":22,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Binary_greater' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":23,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Binary_greater_or_equal' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":24,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Binary_add' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":25,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Binary_subtract' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":26,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Binary_multiply' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":27,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Logical_or' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":28,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Logical_and' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":29,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Binary_divide' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":30,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Binary_or_bitwise' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":31,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Binary_xor_bitwise' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":32,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Binary_and_bitwise' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":33,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Binary_cons' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":34,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Unary_minus' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":39,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Unary_not' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":40,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Wild' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":45,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'PList' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":46,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'PCons' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":47,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'PTuple' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":48,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'PConst' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":49,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'PVar' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":50,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'POption' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":51,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'PConstraint' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":52,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Nonrec' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":57,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Rec' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":58,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Const' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":65,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Tuple' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":66,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'List' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":67,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Variable' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":68,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Unary_expr' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":69,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Bin_expr' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":70,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'If_then_else' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":71,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Lambda' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":72,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Apply' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":73,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Function' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":74,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Match' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":75,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'LetIn' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":76,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Option' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":77,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'EConstraint' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":78,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Let_bind' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":80,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Let' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":86,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Expr' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":91,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Constructor 'Statement' has no documentation attribute","location":{"path":"OMLet/lib/ast.mli","range":{"start":{"line":92,"column":1}}},"severity":"INFO","code":{"value":"no_docs_parsetree","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OMLet/lib/codegen.ml","range":{"start":{"line":50,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OMLet/lib/codegen.ml","range":{"start":{"line":54,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OMLet/lib/codegen.ml","range":{"start":{"line":55,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OMLet/lib/codegen.ml","range":{"start":{"line":55,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OMLet/lib/codegen.ml","range":{"start":{"line":65,"column":1}}},"severity":"INFO"}
{"message":"Using `failwith` (or `assert false`) usually is a clue that a corner case is not being handled properly. To report errors we recommend using error monad instead. In princliple, these construction are OK for temporary work-in-progress code, but in release they should be eliminated","location":{"path":"OMLet/lib/codegen.ml","range":{"start":{"line":81,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OMLet/lib/codegen.ml","range":{"start":{"line":258,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OMLet/lib/codegen.ml","range":{"start":{"line":261,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OMLet/lib/codegen.ml","range":{"start":{"line":277,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OMLet/lib/codegen.ml","range":{"start":{"line":280,"column":1}}},"severity":"INFO"}
{"message":"OCaml files should provide license information in second line (structure item)","location":{"path":"OMLet/lib/codegenTypes.mli","range":{"start":{"line":4,"column":1}}},"severity":"INFO","code":{"value":"top_file_license","url":"https://kakadu.github.io/zanuda/"}}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OMLet/repl/repl.ml","range":{"start":{"line":19,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OMLet/repl/repl.ml","range":{"start":{"line":20,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OMLet/repl/repl.ml","range":{"start":{"line":21,"column":1}}},"severity":"INFO"}
{"message":"Using mutable data structures for teaching purposes is usually discouraged. Replace Hashtables by standard tree-like maps or consider Hash-Array Mapped Tries (HAMT). Use mutable `ref`erences and mutable structure fields only if it is really required. In all places where it is needed indeed, describe in a comment why it is needed there.","location":{"path":"OMLet/repl/repl.ml","range":{"start":{"line":22,"column":1}}},"severity":"INFO"}
